/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    readonly "/user": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get user profile
         * @description Retrieves the authenticated user's profile information
         */
        readonly get: operations["getUserProfile"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/user/stats": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get user statistics
         * @description Retrieves account-wide statistics for the authenticated user
         */
        readonly get: operations["getUserStats"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collections": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all collections
         * @description Retrieves all collections for the authenticated user
         */
        readonly get: operations["getAllCollections"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collections/{parentId}/childrens": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get child collections
         * @description Retrieves child collections of a specific parent collection
         */
        readonly get: operations["getChildCollections"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collections/sort": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Reorder collections
         * @description Change the sort order of collections
         */
        readonly put: operations["reorderCollections"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collections/collapsed": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Toggle collections expansion
         * @description Expand or collapse collections in the UI
         */
        readonly put: operations["toggleCollectionsExpansion"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collections/clean": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Remove empty collections
         * @description Remove all empty collections from the account
         */
        readonly put: operations["removeEmptyCollections"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collection": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Create a new collection
         * @description Creates a new collection with the specified properties
         */
        readonly post: operations["createCollection"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collection/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get collection details
         * @description Retrieves detailed information about a specific collection
         */
        readonly get: operations["getCollection"];
        /**
         * Update a collection
         * @description Updates properties of an existing collection
         */
        readonly put: operations["updateCollection"];
        readonly post?: never;
        /**
         * Delete a collection
         * @description Permanently deletes a collection and all its bookmarks
         */
        readonly delete: operations["deleteCollection"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collection/{id}/stats": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get collection statistics
         * @description Retrieves statistics for a specific collection
         */
        readonly get: operations["getCollectionStats"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collection/{id}/sharing": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Share a collection
         * @description Share a collection with specific users or generate public sharing link
         */
        readonly put: operations["shareCollection"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collection/{id}/merge": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Merge collections
         * @description Merge multiple collections into a target collection
         */
        readonly put: operations["mergeCollections"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/collection/-99/clear": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Empty trash
         * @description Permanently delete all bookmarks in the trash collection
         */
        readonly put: operations["emptyTrash"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrops/0": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all bookmarks
         * @description Retrieves all bookmarks from all collections with filtering options
         */
        readonly get: operations["getAllBookmarks"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrops/{collectionId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get bookmarks from a collection
         * @description Retrieves bookmarks from a specific collection with filtering options
         */
        readonly get: operations["getBookmarksByCollection"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrops": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Advanced bookmark search
         * @description Search bookmarks with advanced filtering options
         */
        readonly get: operations["searchRaindrops"];
        /**
         * Update multiple bookmarks
         * @description Update properties of multiple bookmarks at once
         */
        readonly put: operations["batchUpdateBookmarks"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrops/single": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get detailed information about a single bookmark
         * @description Retrieves comprehensive details about a specific bookmark by ID
         */
        readonly get: operations["getSingleBookmark"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrops/multiple": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get multiple bookmarks by IDs
         * @description Retrieves multiple bookmarks by their IDs
         */
        readonly get: operations["getMultipleBookmarks"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrops/suggest": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Suggest tags, collections, and covers based on URL
         * @description Get AI-powered suggestions for organizing a bookmark based on its URL
         */
        readonly get: operations["suggestTagsCollectionsCovers"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrops/move": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Move multiple bookmarks
         * @description Move multiple bookmarks to a different collection
         */
        readonly put: operations["bulkMoveBookmarks"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrops/tags": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Add or remove tags from bookmarks
         * @description Batch operation to add or remove tags from multiple bookmarks
         */
        readonly put: operations["batchTagBookmarks"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrops/delete": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete multiple bookmarks
         * @description Delete multiple bookmarks at once
         */
        readonly delete: operations["batchDeleteBookmarks"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrop": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Add a new bookmark
         * @description Creates a new bookmark with automatic metadata extraction
         */
        readonly post: operations["createBookmark"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrop/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get bookmark by ID
         * @description Retrieves detailed information about a specific bookmark
         */
        readonly get: operations["getBookmark"];
        /**
         * Update a bookmark
         * @description Updates properties of an existing bookmark
         */
        readonly put: operations["updateBookmark"];
        readonly post?: never;
        /**
         * Delete a bookmark
         * @description Moves a bookmark to trash (soft delete)
         */
        readonly delete: operations["deleteBookmark"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrop/{id}/permanent": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post?: never;
        /**
         * Permanently delete a bookmark
         * @description Permanently deletes a bookmark (cannot be recovered)
         */
        readonly delete: operations["permanentDeleteBookmark"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrop/{id}/reminder": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Set a reminder for a bookmark
         * @description Set or update a reminder notification for a bookmark
         */
        readonly put: operations["setReminder"];
        readonly post?: never;
        /**
         * Delete a bookmark reminder
         * @description Remove the reminder notification from a bookmark
         */
        readonly delete: operations["deleteReminder"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrop/{id}/highlights": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get highlights for a specific bookmark
         * @description Retrieves all text highlights for a given bookmark
         */
        readonly get: operations["getHighlightsForBookmark"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/raindrop/file": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Upload a file as a bookmark
         * @description Upload a file and create a bookmark from it
         */
        readonly put: operations["uploadFile"];
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/file/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Retrieve a file
         * @description Download or retrieve information about an uploaded file
         */
        readonly get: operations["getFile"];
        readonly put?: never;
        readonly post?: never;
        /**
         * Delete a file
         * @description Delete an uploaded file
         */
        readonly delete: operations["deleteFile"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/highlights": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all highlights
         * @description Retrieves all highlights from a user's bookmarks with pagination
         */
        readonly get: operations["getAllHighlights"];
        readonly put?: never;
        /**
         * Add a new highlight to a bookmark
         * @description Creates a new text highlight for a specific bookmark
         */
        readonly post: operations["addHighlightToBookmark"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/highlights/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        /**
         * Update a highlight
         * @description Modifies an existing highlight's text, note, or color
         */
        readonly put: operations["updateHighlight"];
        readonly post?: never;
        /**
         * Delete a highlight
         * @description Permanently removes a highlight from a bookmark
         */
        readonly delete: operations["deleteHighlight"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/highlights/{collectionId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all highlights in a collection
         * @description Retrieves all highlights from bookmarks in a specific collection
         */
        readonly get: operations["getHighlightsByCollection"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/tags": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all tags used in bookmarks
         * @description Retrieves all unique tags used in the user's bookmarks
         */
        readonly get: operations["getAllTags"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/tags/0": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get all tags (alternative endpoint)
         * @description Alternative endpoint to retrieve all tags
         */
        readonly get: operations["getAllTagsAlt"];
        /**
         * Rename or merge tags globally
         * @description Rename or merge tags across all collections
         */
        readonly put: operations["renameOrMergeAllTags"];
        readonly post?: never;
        /**
         * Delete multiple tags globally
         * @description Delete multiple tags from all bookmarks
         */
        readonly delete: operations["deleteAllTags"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/tags/{collectionId}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get tags from a specific collection
         * @description Retrieves all tags used in bookmarks within a specific collection
         */
        readonly get: operations["getTagsByCollection"];
        /**
         * Rename or merge tags in a collection
         * @description Rename or merge tags within a specific collection
         */
        readonly put: operations["renameOrMergeCollectionTags"];
        readonly post?: never;
        /**
         * Delete tags from a collection
         * @description Delete multiple tags from bookmarks in a specific collection
         */
        readonly delete: operations["deleteCollectionTags"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/import": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Import bookmarks from external services
         * @description Import bookmarks from files or external services
         */
        readonly post: operations["importBookmarks"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/import/url": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Import bookmarks from URL
         * @description Import bookmarks from a remote URL hosting a bookmarks file
         */
        readonly post: operations["importFromUrl"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/import/status": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get import status
         * @description Check the status of an ongoing import operation
         */
        readonly get: operations["getImportStatus"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/export": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /**
         * Export bookmarks
         * @description Export bookmarks in various formats
         */
        readonly post: operations["exportBookmarks"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/export/status": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get export status
         * @description Check the status of an ongoing export operation
         */
        readonly get: operations["getExportStatus"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/filters": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /**
         * Get available filters for bookmarks
         * @description Returns available filters such as tags, domains, and highlights to refine searches
         */
        readonly get: operations["getAvailableFilters"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        readonly Collection: {
            /** @description Collection ID */
            readonly _id: number;
            /** @description Collection title */
            readonly title: string;
            /** @description Collection description */
            readonly description?: string;
            /** @description Collection color theme */
            readonly color?: string;
            /** @description Number of bookmarks in collection */
            readonly count?: number;
            /** @description Whether collection is public */
            readonly public?: boolean;
            /** @description Parent collection reference */
            readonly parent?: {
                readonly $id?: number;
            };
            /** @description Whether collection is expanded in UI */
            readonly expanded?: boolean;
            /** @description Sort order within parent */
            readonly sort?: string;
            /** @description Access control settings */
            readonly access?: Record<string, never>;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            readonly created?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            readonly lastUpdate?: string;
        };
        readonly Bookmark: {
            /** @description Bookmark ID */
            readonly _id: number;
            /**
             * Format: uri
             * @description Bookmark URL
             */
            readonly link: string;
            /** @description Bookmark title */
            readonly title: string;
            /** @description Bookmark description/excerpt */
            readonly excerpt?: string;
            /** @description User notes for the bookmark */
            readonly note?: string;
            /**
             * @description Type of bookmark content
             * @enum {string}
             */
            readonly type?: "link" | "article" | "image" | "video" | "document" | "audio";
            /**
             * Format: uri
             * @description Cover image URL
             */
            readonly cover?: string;
            /** @description Array of tags */
            readonly tags?: readonly string[];
            /** @description Whether bookmark is marked as important */
            readonly important?: boolean;
            /** @description Reminder settings */
            readonly reminder?: {
                /** Format: date-time */
                readonly date?: string;
                readonly note?: string;
            };
            /** @description Whether bookmark is in trash */
            readonly removed?: boolean;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            readonly created?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            readonly lastUpdate?: string;
            /** @description Domain of the bookmark URL */
            readonly domain?: string;
            /** @description User ID of creator */
            readonly creatorRef?: number;
            /** @description Collection reference */
            readonly collection?: {
                readonly $id?: number;
                readonly title?: string;
            };
            /** @description Text highlights for this bookmark */
            readonly highlights?: readonly components["schemas"]["Highlight"][];
        };
        readonly Highlight: {
            /** @description Unique highlight ID */
            readonly _id: string;
            /** @description Highlighted text content */
            readonly text: string;
            /** @description Optional note for the highlight */
            readonly note?: string;
            /**
             * @description Highlight color
             * @default yellow
             * @enum {string}
             */
            readonly color: "blue" | "brown" | "cyan" | "gray" | "green" | "indigo" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow";
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            readonly created?: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            readonly lastUpdate?: string;
            /** @description Title of the parent bookmark */
            readonly title?: string;
            /**
             * Format: uri
             * @description URL of the parent bookmark
             */
            readonly link?: string;
            /** @description Domain of the parent bookmark */
            readonly domain?: string;
            /** @description Context around the highlight */
            readonly excerpt?: string;
            /** @description Tags from the parent bookmark */
            readonly tags?: readonly string[];
            /** @description Reference to parent bookmark */
            readonly raindrop?: {
                readonly _id?: number;
                readonly title?: string;
                readonly link?: string;
                readonly collection?: {
                    readonly $id?: number;
                };
            };
        };
        readonly Tag: {
            /** @description Tag name */
            readonly _id: string;
            /** @description Number of bookmarks with this tag */
            readonly count: number;
        };
        readonly User: {
            /** @description User ID */
            readonly _id: number;
            /**
             * Format: email
             * @description User email address
             */
            readonly email: string;
            /** @description User's full name */
            readonly fullName?: string;
            /**
             * Format: uri
             * @description Avatar image URL
             */
            readonly avatar?: string;
            /** @description Whether user has Pro subscription */
            readonly pro?: boolean;
            /**
             * Format: date-time
             * @description Pro subscription expiration date
             */
            readonly proExpire?: string;
            /**
             * Format: date-time
             * @description Registration date
             */
            readonly registered?: string;
            /**
             * Format: date-time
             * @description Last profile update
             */
            readonly lastUpdate?: string;
        };
        readonly CreateCollectionRequest: {
            /** @description Collection title */
            readonly title: string;
            /**
             * @description Whether collection should be public
             * @default false
             */
            readonly public: boolean;
            /** @description Parent collection reference */
            readonly parent?: {
                readonly $id?: number;
            };
            /** @description Collection color theme */
            readonly color?: string;
            /** @description Collection description */
            readonly description?: string;
        };
        readonly UpdateCollectionRequest: {
            /** @description Collection title */
            readonly title?: string;
            /** @description Whether collection should be public */
            readonly public?: boolean;
            /** @description Parent collection reference */
            readonly parent?: {
                readonly $id?: number;
            };
            /** @description Collection color theme */
            readonly color?: string;
            /** @description Collection description */
            readonly description?: string;
        };
        readonly ShareCollectionRequest: {
            /**
             * @description Sharing permission level
             * @enum {string}
             */
            readonly level: "view" | "edit" | "remove";
            /** @description Email addresses to share with */
            readonly emails?: readonly string[];
        };
        readonly CreateBookmarkRequest: {
            /**
             * Format: uri
             * @description Bookmark URL
             */
            readonly link: string;
            /** @description Bookmark title (auto-extracted if not provided) */
            readonly title?: string;
            /** @description Bookmark description */
            readonly excerpt?: string;
            /** @description Array of tags */
            readonly tags?: readonly string[];
            /**
             * @description Whether bookmark is important
             * @default false
             */
            readonly important: boolean;
            /** @description Target collection reference */
            readonly collection?: {
                readonly $id?: number;
            };
            /** @description Settings for content parsing */
            readonly pleaseParse?: Record<string, never>;
        };
        readonly UpdateBookmarkRequest: {
            /**
             * Format: uri
             * @description Bookmark URL
             */
            readonly link?: string;
            /** @description Bookmark title */
            readonly title?: string;
            /** @description Bookmark description */
            readonly excerpt?: string;
            /** @description User notes */
            readonly note?: string;
            /** @description Array of tags */
            readonly tags?: readonly string[];
            /** @description Whether bookmark is important */
            readonly important?: boolean;
            /** @description Target collection reference */
            readonly collection?: {
                readonly $id?: number;
            };
            /**
             * Format: uri
             * @description Cover image URL
             */
            readonly cover?: string;
        };
        readonly BatchUpdateBookmarksRequest: {
            /** @description Array of bookmark IDs to update */
            readonly ids: readonly number[];
            /** @description Tags to set on bookmarks */
            readonly tags?: readonly string[];
            /** @description Collection to move bookmarks to */
            readonly collection?: {
                readonly $id?: number;
            };
            /** @description Whether bookmarks should be marked important */
            readonly important?: boolean;
            /** @description Whether bookmarks should be marked as broken */
            readonly broken?: boolean;
        };
        readonly BulkMoveBookmarksRequest: {
            /** @description Array of bookmark IDs to move */
            readonly ids: readonly number[];
            /** @description Target collection */
            readonly collection: {
                readonly $id?: number;
            };
        };
        readonly BatchTagBookmarksRequest: {
            /** @description Array of bookmark IDs */
            readonly ids: readonly number[];
            /** @description Tags to add or remove */
            readonly tags: readonly string[];
            /**
             * @description Whether to replace existing tags or add to them
             * @default false
             */
            readonly replace: boolean;
        };
        readonly SetReminderRequest: {
            /**
             * Format: date-time
             * @description Reminder date and time
             */
            readonly date: string;
            /** @description Optional reminder note */
            readonly note?: string;
        };
        readonly CreateHighlightRequest: {
            /** @description Bookmark reference */
            readonly raindrop: {
                readonly $id?: number;
            };
            /** @description Highlighted text */
            readonly text: string;
            /** @description Optional note for the highlight */
            readonly note?: string;
            /**
             * @description Highlight color
             * @default yellow
             * @enum {string}
             */
            readonly color: "blue" | "brown" | "cyan" | "gray" | "green" | "indigo" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow";
        };
        readonly UpdateHighlightRequest: {
            /** @description Updated highlight text */
            readonly text?: string;
            /** @description Updated note */
            readonly note?: string;
            /**
             * @description Updated highlight color
             * @enum {string}
             */
            readonly color?: "blue" | "brown" | "cyan" | "gray" | "green" | "indigo" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow";
        };
        readonly TagOperationRequest: {
            /** @description Original tag name (for rename operation) */
            readonly from?: string;
            /** @description New tag name */
            readonly to?: string;
            /** @description Array of tag names (for merge operation) */
            readonly tags?: readonly string[];
        };
        readonly ImportBookmarksRequest: {
            /**
             * Format: binary
             * @description Bookmarks file to import
             */
            readonly file: string;
            /** @description Collection ID to import into */
            readonly collection?: string;
            /**
             * @description Format of the import file
             * @enum {string}
             */
            readonly format?: "html" | "csv" | "pocket" | "instapaper" | "netscape" | "readwise";
            /**
             * @description Import mode
             * @default add
             * @enum {string}
             */
            readonly mode: "add" | "replace";
            /**
             * @description Whether to parse content during import
             * @default true
             */
            readonly parse: boolean;
        };
        readonly ImportFromUrlRequest: {
            /**
             * Format: uri
             * @description URL of bookmarks file to import
             */
            readonly url: string;
            /**
             * @description Whether to parse imported bookmarks
             * @default true
             */
            readonly parse: boolean;
            /** @description Collection details to import into */
            readonly collection?: {
                readonly $id?: number;
                readonly title?: string;
            };
        };
        readonly ExportBookmarksRequest: {
            /** @description Collection ID to export (omit for all bookmarks) */
            readonly collection?: number;
            /**
             * @description Export format
             * @enum {string}
             */
            readonly format: "csv" | "html" | "pdf";
            /**
             * @description Include broken bookmarks
             * @default false
             */
            readonly broken: boolean;
            /**
             * @description Include duplicate bookmarks
             * @default false
             */
            readonly duplicates: boolean;
        };
        readonly UserProfileResponse: {
            readonly result: boolean;
            readonly user: components["schemas"]["User"];
        };
        readonly UserStatsResponse: {
            readonly result: boolean;
            readonly stats: {
                readonly bookmarks?: number;
                readonly collections?: number;
                readonly highlights?: number;
                readonly tags?: number;
            };
        };
        readonly CollectionStatsResponse: {
            readonly result: boolean;
            readonly stats: {
                readonly bookmarks?: number;
                readonly highlights?: number;
                readonly tags?: number;
            };
        };
        readonly CollectionsResponse: {
            readonly result: boolean;
            readonly items: readonly components["schemas"]["Collection"][];
        };
        readonly CollectionItemResponse: {
            readonly result: boolean;
            readonly item: components["schemas"]["Collection"];
        };
        readonly ShareCollectionResponse: {
            readonly result: boolean;
            /**
             * Format: uri
             * @description Public sharing link
             */
            readonly link: string;
            /** @description List of users with access */
            readonly access: readonly {
                /** Format: email */
                readonly email?: string;
                /** @enum {string} */
                readonly level?: "view" | "edit";
            }[];
        };
        readonly BookmarksResponse: {
            readonly result: boolean;
            readonly items: readonly components["schemas"]["Bookmark"][];
            /** @description Total number of matching bookmarks */
            readonly count?: number;
            /** @description Collection ID that was searched */
            readonly collectionId?: number;
        };
        readonly BookmarkItemResponse: {
            readonly result: boolean;
            readonly item: components["schemas"]["Bookmark"];
        };
        readonly HighlightsResponse: {
            readonly result: boolean;
            readonly items: readonly components["schemas"]["Highlight"][];
        };
        readonly HighlightItemResponse: {
            readonly result: boolean;
            readonly item: components["schemas"]["Highlight"];
        };
        readonly TagsResponse: {
            readonly result: boolean;
            readonly items: readonly components["schemas"]["Tag"][];
        };
        readonly SuggestionsResponse: {
            readonly result: boolean;
            readonly item: {
                readonly tags?: readonly string[];
                readonly collections?: readonly {
                    readonly _id?: number;
                    readonly title?: string;
                }[];
                readonly covers?: readonly string[];
            };
        };
        readonly ImportResponse: {
            readonly result: boolean;
            readonly items: readonly {
                readonly _id?: number;
                readonly link?: string;
            }[];
            /** @description Number of bookmarks imported */
            readonly imported?: number;
            /** @description Number of duplicates found */
            readonly duplicates?: number;
        };
        readonly ImportJobResponse: {
            readonly result: boolean;
            readonly item: {
                /** @description Import job ID */
                readonly _id?: string;
            };
        };
        readonly ImportStatusResponse: {
            readonly result: boolean;
            /**
             * @description Current import status
             * @enum {string}
             */
            readonly status: "in-progress" | "ready" | "error";
            /** @description Import progress percentage */
            readonly progress?: number;
            /** @description Number of bookmarks imported so far */
            readonly imported?: number;
            /** @description Number of duplicates found */
            readonly duplicates?: number;
            /** @description Error message if status is 'error' */
            readonly error?: string;
        };
        readonly ExportResponse: {
            readonly result: boolean;
            /**
             * Format: uri
             * @description Download URL for the exported file
             */
            readonly url: string;
        };
        readonly ExportStatusResponse: {
            readonly result: boolean;
            /**
             * @description Current export status
             * @enum {string}
             */
            readonly status: "in-progress" | "ready" | "error";
            /** @description Export progress percentage */
            readonly progress?: number;
            /**
             * Format: uri
             * @description Download URL when ready
             */
            readonly url?: string;
            /** @description Error message if status is 'error' */
            readonly error?: string;
        };
        readonly FiltersResponse: {
            readonly result: boolean;
            /** @description Available tag filters */
            readonly tags: readonly string[];
            /** @description Available domain filters */
            readonly domains: readonly string[];
            /** @description Available highlight filters */
            readonly highlights: readonly string[];
        };
        readonly ResultResponse: {
            /** @description Whether the operation was successful */
            readonly result: boolean;
        };
        readonly ErrorResponse: {
            /** @default false */
            readonly result: boolean;
            /** @description Error message */
            readonly error: string;
            /** @description Detailed error description */
            readonly errorMessage?: string;
            /** @description Error code */
            readonly errorCode?: number;
        };
    };
    responses: {
        /** @description Bad request - invalid parameters or request body */
        readonly BadRequestError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Unauthorized - invalid or missing access token */
        readonly UnauthorizedError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Resource not found */
        readonly NotFoundError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Rate limit exceeded */
        readonly RateLimitError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Internal server error */
        readonly ServerError: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: {
        /** @description Collection ID */
        readonly CollectionId: number;
        /** @description Bookmark ID */
        readonly BookmarkId: number;
        /** @description Search query for filtering results */
        readonly SearchQuery: string;
        /** @description Sort order for results */
        readonly SortOrder: "+created" | "-created" | "+title" | "-title" | "+domain" | "-domain" | "+score" | "-score";
        /** @description Filter by specific tag */
        readonly TagFilter: string;
        /** @description Filter by important flag */
        readonly ImportantFilter: boolean;
        /** @description Filter by duplicates */
        readonly DuplicatesFilter: boolean;
        /** @description Filter by broken links */
        readonly BrokenFilter: boolean;
        /** @description Filter by presence of highlights */
        readonly HighlightFilter: boolean;
        /** @description Filter by domain */
        readonly DomainFilter: string;
        /** @description Filter by collection ID */
        readonly CollectionFilter: number;
        /** @description Number of items per page */
        readonly PerPage: number;
        /** @description Page number for pagination */
        readonly Page: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    readonly getUserProfile: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description User profile retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
            readonly 429: components["responses"]["RateLimitError"];
            readonly 500: components["responses"]["ServerError"];
        };
    };
    readonly getUserStats: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description User statistics retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["UserStatsResponse"];
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getAllCollections: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Collections retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CollectionsResponse"];
                };
            };
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getChildCollections: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Parent collection ID */
                readonly parentId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Child collections retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CollectionsResponse"];
                };
            };
        };
    };
    readonly reorderCollections: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Sort order specification */
                    readonly sort: string;
                };
            };
        };
        readonly responses: {
            /** @description Collections reordered successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly toggleCollectionsExpansion: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Whether collections should be collapsed */
                    readonly collapsed: boolean;
                };
            };
        };
        readonly responses: {
            /** @description Collections expansion toggled successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly removeEmptyCollections: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Empty collections removed successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        /** @description Number of collections removed */
                        readonly count?: number;
                    };
                };
            };
        };
    };
    readonly createCollection: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateCollectionRequest"];
            };
        };
        readonly responses: {
            /** @description Collection created successfully */
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CollectionItemResponse"];
                };
            };
            readonly 400: components["responses"]["BadRequestError"];
            readonly 401: components["responses"]["UnauthorizedError"];
        };
    };
    readonly getCollection: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly id: components["parameters"]["CollectionId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Collection retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CollectionItemResponse"];
                };
            };
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateCollection: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly id: components["parameters"]["CollectionId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpdateCollectionRequest"];
            };
        };
        readonly responses: {
            /** @description Collection updated successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CollectionItemResponse"];
                };
            };
        };
    };
    readonly deleteCollection: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly id: components["parameters"]["CollectionId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Collection deleted successfully */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getCollectionStats: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly id: components["parameters"]["CollectionId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Collection statistics retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["CollectionStatsResponse"];
                };
            };
        };
    };
    readonly shareCollection: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly id: components["parameters"]["CollectionId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["ShareCollectionRequest"];
            };
        };
        readonly responses: {
            /** @description Collection shared successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ShareCollectionResponse"];
                };
            };
        };
    };
    readonly mergeCollections: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly id: components["parameters"]["CollectionId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Array of collection IDs to merge into the target */
                    readonly with: readonly number[];
                };
            };
        };
        readonly responses: {
            /** @description Collections merged successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly emptyTrash: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Trash emptied successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly getAllBookmarks: {
        readonly parameters: {
            readonly query?: {
                /** @description Search query for filtering results */
                readonly search?: components["parameters"]["SearchQuery"];
                /** @description Sort order for results */
                readonly sort?: components["parameters"]["SortOrder"];
                /** @description Filter by specific tag */
                readonly tag?: components["parameters"]["TagFilter"];
                /** @description Filter by important flag */
                readonly important?: components["parameters"]["ImportantFilter"];
                /** @description Filter by duplicates */
                readonly duplicates?: components["parameters"]["DuplicatesFilter"];
                /** @description Filter by broken links */
                readonly broken?: components["parameters"]["BrokenFilter"];
                /** @description Filter by presence of highlights */
                readonly highlight?: components["parameters"]["HighlightFilter"];
                /** @description Filter by domain */
                readonly domain?: components["parameters"]["DomainFilter"];
                /** @description Number of items per page */
                readonly perpage?: components["parameters"]["PerPage"];
                /** @description Page number for pagination */
                readonly page?: components["parameters"]["Page"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Bookmarks retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarksResponse"];
                };
            };
        };
    };
    readonly getBookmarksByCollection: {
        readonly parameters: {
            readonly query?: {
                /** @description Search query for filtering results */
                readonly search?: components["parameters"]["SearchQuery"];
                /** @description Sort order for results */
                readonly sort?: components["parameters"]["SortOrder"];
                /** @description Filter by specific tag */
                readonly tag?: components["parameters"]["TagFilter"];
                /** @description Filter by important flag */
                readonly important?: components["parameters"]["ImportantFilter"];
                /** @description Filter by duplicates */
                readonly duplicates?: components["parameters"]["DuplicatesFilter"];
                /** @description Filter by broken links */
                readonly broken?: components["parameters"]["BrokenFilter"];
                /** @description Filter by presence of highlights */
                readonly highlight?: components["parameters"]["HighlightFilter"];
                /** @description Filter by domain */
                readonly domain?: components["parameters"]["DomainFilter"];
                /** @description Number of items per page */
                readonly perpage?: components["parameters"]["PerPage"];
                /** @description Page number for pagination */
                readonly page?: components["parameters"]["Page"];
            };
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly id: components["parameters"]["CollectionId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Bookmarks retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarksResponse"];
                };
            };
        };
    };
    readonly searchRaindrops: {
        readonly parameters: {
            readonly query?: {
                /** @description Search query for filtering results */
                readonly search?: components["parameters"]["SearchQuery"];
                /** @description Filter by collection ID */
                readonly collection?: components["parameters"]["CollectionFilter"];
                /** @description Filter by tags */
                readonly tags?: readonly string[];
                /** @description Filter by creation date (start) */
                readonly createdStart?: string;
                /** @description Filter by creation date (end) */
                readonly createdEnd?: string;
                /** @description Filter by important flag */
                readonly important?: components["parameters"]["ImportantFilter"];
                /** @description Filter by media type */
                readonly media?: string;
                /** @description Number of items per page */
                readonly perpage?: components["parameters"]["PerPage"];
                /** @description Page number for pagination */
                readonly page?: components["parameters"]["Page"];
                /** @description Sort order for results */
                readonly sort?: components["parameters"]["SortOrder"];
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Search results retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarksResponse"];
                };
            };
        };
    };
    readonly batchUpdateBookmarks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["BatchUpdateBookmarksRequest"];
            };
        };
        readonly responses: {
            /** @description Bookmarks updated successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly getSingleBookmark: {
        readonly parameters: {
            readonly query: {
                /** @description Bookmark ID */
                readonly id: number;
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Bookmark retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarkItemResponse"];
                };
            };
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getMultipleBookmarks: {
        readonly parameters: {
            readonly query: {
                /** @description Comma-separated bookmark IDs */
                readonly ids: string;
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Bookmarks retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarksResponse"];
                };
            };
        };
    };
    readonly suggestTagsCollectionsCovers: {
        readonly parameters: {
            readonly query: {
                /** @description URL to analyze for suggestions */
                readonly url: string;
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Suggestions retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["SuggestionsResponse"];
                };
            };
        };
    };
    readonly bulkMoveBookmarks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["BulkMoveBookmarksRequest"];
            };
        };
        readonly responses: {
            /** @description Bookmarks moved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly batchTagBookmarks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["BatchTagBookmarksRequest"];
            };
        };
        readonly responses: {
            /** @description Tags updated successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly batchDeleteBookmarks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Array of bookmark IDs to delete */
                    readonly ids: readonly number[];
                };
            };
        };
        readonly responses: {
            /** @description Bookmarks deleted successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly createBookmark: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateBookmarkRequest"];
            };
        };
        readonly responses: {
            /** @description Bookmark created successfully */
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarkItemResponse"];
                };
            };
            readonly 400: components["responses"]["BadRequestError"];
        };
    };
    readonly getBookmark: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Bookmark ID */
                readonly id: components["parameters"]["BookmarkId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Bookmark retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarkItemResponse"];
                };
            };
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly updateBookmark: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Bookmark ID */
                readonly id: components["parameters"]["BookmarkId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpdateBookmarkRequest"];
            };
        };
        readonly responses: {
            /** @description Bookmark updated successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarkItemResponse"];
                };
            };
        };
    };
    readonly deleteBookmark: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Bookmark ID */
                readonly id: components["parameters"]["BookmarkId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Bookmark deleted successfully */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly permanentDeleteBookmark: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Bookmark ID */
                readonly id: components["parameters"]["BookmarkId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Bookmark permanently deleted */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly setReminder: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Bookmark ID */
                readonly id: components["parameters"]["BookmarkId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["SetReminderRequest"];
            };
        };
        readonly responses: {
            /** @description Reminder set successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarkItemResponse"];
                };
            };
        };
    };
    readonly deleteReminder: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Bookmark ID */
                readonly id: components["parameters"]["BookmarkId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Reminder deleted successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarkItemResponse"];
                };
            };
        };
    };
    readonly getHighlightsForBookmark: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Bookmark ID */
                readonly id: components["parameters"]["BookmarkId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Highlights retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["HighlightsResponse"];
                };
            };
        };
    };
    readonly uploadFile: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description File to upload
                     */
                    readonly file: string;
                    /** @description Collection ID to add the file to */
                    readonly collectionId: string;
                };
            };
        };
        readonly responses: {
            /** @description File uploaded successfully */
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["BookmarkItemResponse"];
                };
            };
        };
    };
    readonly getFile: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description File ID */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description File retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly deleteFile: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description File ID */
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description File deleted successfully */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getAllHighlights: {
        readonly parameters: {
            readonly query?: {
                /** @description Page number for pagination */
                readonly page?: components["parameters"]["Page"];
                /** @description Number of highlights per page (max 50) */
                readonly perpage?: number;
            };
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Highlights retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["HighlightsResponse"];
                };
            };
        };
    };
    readonly addHighlightToBookmark: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["CreateHighlightRequest"];
            };
        };
        readonly responses: {
            /** @description Highlight created successfully */
            readonly 201: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["HighlightItemResponse"];
                };
            };
        };
    };
    readonly updateHighlight: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Highlight ID */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["UpdateHighlightRequest"];
            };
        };
        readonly responses: {
            /** @description Highlight updated successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["HighlightItemResponse"];
                };
            };
        };
    };
    readonly deleteHighlight: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Highlight ID */
                readonly id: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Highlight deleted successfully */
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content?: never;
            };
            readonly 404: components["responses"]["NotFoundError"];
        };
    };
    readonly getHighlightsByCollection: {
        readonly parameters: {
            readonly query?: {
                /** @description Page number for pagination */
                readonly page?: components["parameters"]["Page"];
                /** @description Number of highlights per page (max 50) */
                readonly perpage?: number;
            };
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly collectionId: number;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Collection highlights retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["HighlightsResponse"];
                };
            };
        };
    };
    readonly getAllTags: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Tags retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["TagsResponse"];
                };
            };
        };
    };
    readonly getAllTagsAlt: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Tags retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["TagsResponse"];
                };
            };
        };
    };
    readonly renameOrMergeAllTags: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["TagOperationRequest"];
            };
        };
        readonly responses: {
            /** @description Tag operation completed successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly deleteAllTags: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Array of tag names to delete */
                    readonly tags: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description Tags deleted successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly getTagsByCollection: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly id: components["parameters"]["CollectionId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Collection tags retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["TagsResponse"];
                };
            };
        };
    };
    readonly renameOrMergeCollectionTags: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly id: components["parameters"]["CollectionId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["TagOperationRequest"];
            };
        };
        readonly responses: {
            /** @description Tag operation completed successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly deleteCollectionTags: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description Collection ID */
                readonly id: components["parameters"]["CollectionId"];
            };
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": {
                    /** @description Array of tag names to delete */
                    readonly tags: readonly string[];
                };
            };
        };
        readonly responses: {
            /** @description Tags deleted successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ResultResponse"];
                };
            };
        };
    };
    readonly importBookmarks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "multipart/form-data": components["schemas"]["ImportBookmarksRequest"];
            };
        };
        readonly responses: {
            /** @description Import completed successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ImportResponse"];
                };
            };
        };
    };
    readonly importFromUrl: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["ImportFromUrlRequest"];
            };
        };
        readonly responses: {
            /** @description Import initiated successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ImportJobResponse"];
                };
            };
        };
    };
    readonly getImportStatus: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Import status retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ImportStatusResponse"];
                };
            };
        };
    };
    readonly exportBookmarks: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody: {
            readonly content: {
                readonly "application/json": components["schemas"]["ExportBookmarksRequest"];
            };
        };
        readonly responses: {
            /** @description Export initiated successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ExportResponse"];
                };
            };
        };
    };
    readonly getExportStatus: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Export status retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["ExportStatusResponse"];
                };
            };
        };
    };
    readonly getAvailableFilters: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Filters retrieved successfully */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": components["schemas"]["FiltersResponse"];
                };
            };
        };
    };
}

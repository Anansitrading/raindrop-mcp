/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description Retrieves the authenticated user's profile.
         */
        get: operations["getUserProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrops/0": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all bookmarks
         * @description Retrieves all bookmarks from all collections.
         */
        get: operations["getAllBookmarks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrops/{collectionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get bookmarks from a collection
         * @description Retrieves bookmarks from a specific collection with filtering options.
         */
        get: operations["getBookmarksByCollection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrops/single": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detailed information about a single bookmark */
        get: operations["getSingleBookmark"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrops/multiple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get multiple bookmarks */
        get: operations["getMultipleBookmarks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrops/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Suggest tags, collections, and covers based on URL */
        get: operations["suggestTagsCollectionsCovers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/filters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available filters for bookmarks
         * @description Returns available filters such as tags, domains, and highlights to refine searches.
         */
        get: operations["getAvailableFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a new bookmark */
        post: operations["createBookmark"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrop/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a bookmark */
        put: operations["updateBookmark"];
        post?: never;
        /** Delete a bookmark */
        delete: operations["deleteBookmark"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrops": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update multiple bookmarks */
        put: operations["batchUpdateBookmarks"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrops/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Move multiple bookmarks */
        put: operations["bulkMoveBookmarks"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrops/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add or remove tags */
        put: operations["batchTagBookmarks"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrops/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete multiple bookmarks */
        delete: operations["batchDeleteBookmarks"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all collections */
        get: operations["getAllCollections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new collection */
        post: operations["createCollection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collection/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a collection */
        put: operations["updateCollection"];
        post?: never;
        /** Delete a collection */
        delete: operations["deleteCollection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a file */
        post: operations["uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve a file */
        get: operations["getFile"];
        put?: never;
        post?: never;
        /** Delete a file */
        delete: operations["deleteFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export/{format}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export bookmarks */
        get: operations["exportBookmarks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/highlights/{raindropId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get highlights for a specific bookmark
         * @description Retrieves all text highlights for a given bookmark.
         */
        get: operations["getHighlightsForBookmark"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/highlights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all highlights
         * @description Retrieves all highlights from a user's bookmarks
         */
        get: operations["getAllHighlights"];
        put?: never;
        /**
         * Add a new highlight to a bookmark
         * @description Creates a new highlight for a bookmark by updating the raindrop.
         */
        post: operations["addHighlightToBookmark"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/highlights/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a highlight
         * @description Modifies an existing highlight.
         */
        put: operations["updateHighlight"];
        post?: never;
        /**
         * Delete a highlight
         * @description Removes a highlight from a bookmark.
         */
        delete: operations["deleteHighlight"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all tags used in bookmarks
         * @description Retrieves all unique tags used in the user's bookmarks.
         */
        get: operations["getAllTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{tag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Rename a tag
         * @description Changes the name of an existing tag.
         */
        put: operations["renameTag"];
        post?: never;
        /**
         * Delete a tag
         * @description Removes a tag from all bookmarks.
         */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/highlights/{collectionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all highlights in a collection
         * @description Retrieves highlights from a specific collection
         */
        get: operations["getHighlightsByCollection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/raindrop/{id}/highlights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add, update or remove highlights
         * @description Creates, updates, or removes highlights for a bookmark
         */
        put: operations["manageHighlights"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import bookmarks from external services
         * @description Allows importing bookmarks from external services or files
         */
        post: operations["importBookmarks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import bookmarks from URL
         * @description Import bookmarks from a remote URL hosting a bookmarks file
         */
        post: operations["importFromUrl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/backups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of backups
         * @description Returns a list of available backups
         */
        get: operations["getBackups"];
        put?: never;
        /**
         * Create a new backup
         * @description Creates a new backup of all user's bookmarks
         */
        post: operations["createBackup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/backup/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a backup
         * @description Downloads a specific backup file
         */
        get: operations["downloadBackup"];
        put?: never;
        post?: never;
        /**
         * Delete a backup
         * @description Deletes a specific backup
         */
        delete: operations["deleteBackup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Highlight: {
            /** @description Unique id of highlight */
            _id?: string;
            /** @description Text of highlight (required) */
            text?: string;
            /** @description Title of bookmark */
            title?: string;
            /**
             * @description Color of highlight. Can be blue, brown, cyan, gray, green, indigo, orange, pink, purple, red, teal, yellow
             * @default yellow
             */
            color: string;
            /** @description Optional note for highlight */
            note?: string;
            /**
             * Format: date-time
             * @description Creation date of highlight
             */
            created?: string;
            /**
             * Format: date-time
             * @description Last update date of highlight
             */
            lastUpdate?: string;
            /** @description Tags list */
            tags?: string[];
            /** @description Highlighted page URL */
            link?: string;
            /** @description Reference to the parent raindrop/bookmark ID */
            raindropRef?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getAllBookmarks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getBookmarksByCollection: {
        parameters: {
            query?: {
                search?: string;
                sort?: "+created" | "-created" | "+title" | "-title";
                tag?: string;
                important?: boolean;
                duplicates?: boolean;
                broken?: boolean;
                highlight?: boolean;
                domain?: string;
                perpage?: number;
                page?: number;
            };
            header?: never;
            path: {
                collectionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getSingleBookmark: {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getMultipleBookmarks: {
        parameters: {
            query: {
                ids: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    suggestTagsCollectionsCovers: {
        parameters: {
            query: {
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getAvailableFilters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available filters. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        tags?: string[];
                        domains?: string[];
                        highlights?: string[];
                    };
                };
            };
        };
    };
    createBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    link?: string;
                    title?: string;
                    collectionId?: number;
                    tags?: string[];
                };
            };
        };
        responses: never;
    };
    updateBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    deleteBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    batchUpdateBookmarks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    bulkMoveBookmarks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    batchTagBookmarks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    batchDeleteBookmarks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getAllCollections: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    createCollection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    updateCollection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    deleteCollection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    exportBookmarks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                format: "html" | "json" | "csv";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    getHighlightsForBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the bookmark to retrieve highlights from. */
                raindropId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of highlights for the bookmark. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: boolean;
                        items?: components["schemas"]["Highlight"][];
                    };
                };
            };
        };
    };
    getAllHighlights: {
        parameters: {
            query?: {
                page?: number;
                perpage?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of all highlights */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: boolean;
                        items?: components["schemas"]["Highlight"][];
                    };
                };
            };
        };
    };
    addHighlightToBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description ID of the bookmark to highlight */
                    raindropId?: number;
                    /** @description The highlighted text */
                    text?: string;
                    /** @description Optional highlight color (hex code) */
                    color?: string;
                };
            };
        };
        responses: {
            /** @description Highlight created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateHighlight: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Updated highlight text */
                    text?: string;
                    /** @description Updated highlight color (hex code) */
                    color?: string;
                };
            };
        };
        responses: {
            /** @description Highlight updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteHighlight: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Highlight deleted successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of all tags. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: boolean;
                        items?: string[];
                    };
                };
            };
        };
    };
    renameTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The current tag name to be renamed. */
                tag: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The new tag name. */
                    newName?: string;
                };
            };
        };
        responses: {
            /** @description Tag renamed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The tag to be deleted. */
                tag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag deleted successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getHighlightsByCollection: {
        parameters: {
            query?: {
                page?: number;
                perpage?: number;
            };
            header?: never;
            path: {
                collectionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of highlights in the collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: boolean;
                        items?: components["schemas"]["Highlight"][];
                    };
                };
            };
        };
    };
    manageHighlights: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Array of highlight objects to add/update/remove */
                    highlights?: {
                        /** @description Required for update/remove operations. Leave empty for new highlights. */
                        _id?: string;
                        /** @description Highlight text. Required for new highlights. Empty string to remove. */
                        text?: string;
                        /** @description Optional note for the highlight */
                        note?: string;
                        /** @description Color of highlight. Can be blue, brown, cyan, gray, green, indigo, orange, pink, purple, red, teal, yellow */
                        color?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Highlights managed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: boolean;
                        item?: {
                            _id?: number;
                            highlights?: components["schemas"]["Highlight"][];
                        };
                    };
                };
            };
        };
    };
    importBookmarks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description HTML file content with bookmarks in Netscape format */
                    html?: string;
                    /**
                     * @description Parse imported bookmarks (extract title, description, etc.)
                     * @default true
                     */
                    parse?: boolean;
                    /** @description Optional folder name to import into */
                    folder?: string;
                    /** @description Collection details to import into */
                    collection?: {
                        /** @description Collection ID to import into */
                        $id?: number;
                        /** @description Collection title (if creating a new one) */
                        title?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Import completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: boolean;
                        items?: {
                            _id?: number;
                            link?: string;
                        }[];
                    };
                };
            };
        };
    };
    importFromUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: uri
                     * @description URL of bookmarks file to import
                     */
                    url?: string;
                    /**
                     * @description Parse imported bookmarks (extract title, description, etc.)
                     * @default true
                     */
                    parse?: boolean;
                    /** @description Collection details to import into */
                    collection?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Import initiated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: boolean;
                        item?: {
                            /** @description Import job ID */
                            _id?: string;
                        };
                    };
                };
            };
        };
    };
    getBackups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of backups */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: boolean;
                        items?: {
                            _id?: string;
                            /** Format: date-time */
                            created?: string;
                            /** @description Size in bytes */
                            size?: number;
                        }[];
                    };
                };
            };
        };
    };
    createBackup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Backup created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result?: boolean;
                        item?: {
                            _id?: string;
                            /** Format: date-time */
                            created?: string;
                        };
                    };
                };
            };
        };
    };
    downloadBackup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Backup file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    deleteBackup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Backup deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}

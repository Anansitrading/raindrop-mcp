{
  "version": 3,
  "sources": ["../src/init-env.ts", "../src/server.ts", "../src/services/raindropmcp.service.ts", "../package.json", "../src/types/raindrop-zod.schemas.ts", "../src/services/raindrop.service.ts", "../src/utils/logger.ts"],
  "sourcesContent": ["/**\n * Environment initialization module\n * \n * CRITICAL: This module MUST be imported first in the entry point\n * to ensure environment variables are loaded before any other code runs.\n */\nimport { config } from 'dotenv';\n\n// Load environment variables immediately\nconfig({ quiet: true });\n", "/**\n * HTTP server entrypoint for the optimized Raindrop MCP service.\n *\n * Exposes the MCP server over HTTP (default port 3002) with session management and CORS.\n * Uses the optimized MCP service with AI-friendly tool descriptions and robust error handling.\n *\n * Compare with the original HTTP server on port 3001 for differences in tool coverage and design.\n */\n\n// CRITICAL: Load environment variables BEFORE any other imports\nimport './init-env.js';\n\nimport { StreamableHTTPServerTransport } from \"@modelcontextprotocol/sdk/server/streamableHttp.js\";\nimport { SSEServerTransport } from \"@modelcontextprotocol/sdk/server/sse.js\";\nimport { randomUUID } from \"node:crypto\";\nimport http from 'node:http';\nimport { parse as parseUrl } from 'node:url';\nimport { AuthorizationCode } from 'simple-oauth2';\nimport { RaindropMCPService } from './services/raindropmcp.service.js';\nimport { createLogger } from './utils/logger.js';\n\nconst PORT = process.env.HTTP_PORT ? parseInt(process.env.HTTP_PORT) : 3002;\nconst logger = createLogger('http');\n\n/**\n * Tracks active MCP sessions for monitoring and cleanup.\n * @type {Map<string, any>}\n */\nconst activeSessions = new Map();\n/**\n * Stores session metadata for each active session.\n * @type {Map<string, any>}\n */\nconst sessionMetadata = new Map();\n/**\n * Checks if a request body is an MCP initialization request.\n * @param body - The request body to check.\n * @returns True if the request is an MCP initialize call.\n */\nfunction isInitializeRequest(body: any): boolean {\n    return body && body.method === 'initialize' && body.jsonrpc === '2.0';\n}\n\n// Raindrop.io OAuth endpoints\n/**\n * Lightweight app placeholder for compatibility with tests that import `app`.\n * When using native http server there is no Express `app`, so we export a\n * minimal object with the same shape used by tests (serverInstance and listen).\n */\nconst app: { listen?: (port: number, cb?: () => void) => any } = {};\nconst RAINDROP_CLIENT_SECRET = process.env.RAINDROP_CLIENT_SECRET;\nconst RAINDROP_REDIRECT_URI = process.env.RAINDROP_REDIRECT_URI || `http://localhost:${PORT}/auth/raindrop/callback`;\n\nconst oauthClient = new AuthorizationCode({\n    client: {\n        id: process.env.RAINDROP_CLIENT_ID,\n        secret: RAINDROP_CLIENT_SECRET,\n    },\n    auth: {\n        tokenHost: 'https://raindrop.io',\n        authorizePath: '/oauth/authorize',\n        tokenPath: '/oauth/access_token',\n    },\n});\n\nconst transports: Record<string, StreamableHTTPServerTransport> = {};\nconst sseTransports: Record<string, SSEServerTransport> = {};\n\n// Create native HTTP server\nconst server = http.createServer(async (req, res) => {\n    try {\n        const url = parseUrl(req.url || '', true);\n        // CORS handling\n        res.setHeader('Access-Control-Allow-Origin', '*');\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, MCP-Session-Id');\n\n        if (req.method === 'OPTIONS') {\n            res.writeHead(200);\n            res.end();\n            return;\n        }\n\n        // Routing\n        if (url.pathname === '/auth/raindrop' && req.method === 'GET') {\n            if (!process.env.RAINDROP_CLIENT_ID) {\n                res.writeHead(500, { 'Content-Type': 'text/plain' });\n                res.end('RAINDROP_CLIENT_ID not set');\n                return;\n            }\n            const authorizationUri = oauthClient.authorizeURL({\n                redirect_uri: RAINDROP_REDIRECT_URI,\n                scope: 'read write',\n            });\n            res.writeHead(302, { Location: authorizationUri });\n            res.end();\n            return;\n        }\n\n        if (url.pathname === '/auth/raindrop/callback' && req.method === 'GET') {\n            const code = url.query.code as string | undefined;\n            if (!code) {\n                res.writeHead(400, { 'Content-Type': 'text/plain' });\n                res.end('Missing code parameter');\n                return;\n            }\n            try {\n                const tokenParams = { code, redirect_uri: RAINDROP_REDIRECT_URI };\n                const accessToken = await oauthClient.getToken(tokenParams as any);\n                res.writeHead(200, { 'Content-Type': 'application/json' });\n                res.end(JSON.stringify({ access_token: accessToken.token.access_token }));\n            } catch (error: any) {\n                res.writeHead(500, { 'Content-Type': 'application/json' });\n                res.end(JSON.stringify({ error: error.message || 'OAuth token exchange failed' }));\n            }\n            return;\n        }\n\n        if (url.pathname === '/health' && req.method === 'GET') {\n            const sessions = Array.from(sessionMetadata.values());\n            const streamableSessions = sessions.filter(s => s.type !== 'sse');\n            const sseSessions = sessions.filter(s => s.type === 'sse');\n            \n            res.writeHead(200, { 'Content-Type': 'application/json' });\n            res.end(JSON.stringify({\n                status: 'healthy',\n                service: 'raindrop-mcp-optimized',\n                version: '2.0.0',\n                port: PORT,\n                activeSessions: sessions.length,\n                sessionTypes: {\n                    streamable: streamableSessions.length,\n                    sse: sseSessions.length,\n                },\n                sessions,\n                optimizations: {\n                    toolCount: 24,\n                    originalToolCount: 37,\n                    reduction: '35%',\n                    features: [\n                        'Consolidated tools with operation parameters',\n                        'AI-friendly descriptions and examples',\n                        'Consistent naming conventions',\n                        'Enhanced parameter documentation',\n                        'Standardized resource URI patterns',\n                        'Improved error handling with suggestions',\n                    ],\n                },\n                transports: {\n                    modern: 'StreamableHTTPServerTransport (/mcp endpoint)',\n                    legacy: 'SSEServerTransport (/sse + /messages endpoints)',\n                },\n            }));\n            return;\n        }\n\n        if (url.pathname === '/' && req.method === 'GET') {\n            res.writeHead(200, { 'Content-Type': 'application/json' });\n            res.end(JSON.stringify({\n                name: 'Raindrop MCP HTTP Server',\n                version: '2.0.0',\n                description: 'Optimized Model Context Protocol server for Raindrop.io with enhanced AI-friendly tools',\n                endpoints: {\n                    '/': 'This documentation',\n                    '/health': 'Health check with session info and optimization details',\n                    '/mcp': 'MCP protocol endpoint (POST only) - Modern StreamableHTTP transport',\n                    '/sse': 'Legacy SSE connection endpoint (GET) - Server-Sent Events transport',\n                    '/messages': 'Legacy SSE message endpoint (POST) - Send messages to SSE transport',\n                },\n                optimizations: {\n                    tools: { original: 37, optimized: 24, improvement: '35% reduction in tool count' },\n                    categories: [\n                        'Collections (7 tools)',\n                        'Bookmarks (6 tools)',\n                        'Tags (2 tools)',\n                        'Highlights (4 tools)',\n                        'User (2 tools)',\n                        'Import/Export (3 tools)',\n                    ],\n                    features: [\n                        'Hierarchical tool naming (category_action pattern)',\n                        'Rich contextual descriptions with use cases',\n                        'Comprehensive parameter documentation',\n                        'Smart tool consolidation with operation parameters',\n                        'Standardized resource URI patterns (raindrop://type/scope)',\n                        'Enhanced error messages with actionable suggestions',\n                    ],\n                },\n                usage: {\n                    'MCP Inspector': `npx @modelcontextprotocol/inspector http://localhost:${PORT}/mcp`,\n                    'Direct API': `POST http://localhost:${PORT}/mcp`,\n                    'Legacy SSE': `GET http://localhost:${PORT}/sse + POST http://localhost:${PORT}/messages`,\n                    'Compare with original': `Original server on port 3001, optimized on port ${PORT}`,\n                },\n            }));\n            return;\n        }\n\n        // SSE endpoint for legacy clients (GET to establish SSE connection)\n        if (url.pathname === '/sse' && req.method === 'GET') {\n            try {\n                const sessionId = randomUUID();\n                const transport = new SSEServerTransport('/messages', res, {\n                    allowedOrigins: ['*'], // Allow all origins for development\n                    enableDnsRebindingProtection: false, // Disable for compatibility\n                });\n\n                transport.onclose = () => {\n                    delete sseTransports[sessionId];\n                    sessionMetadata.delete(sessionId);\n                    logger.info(`SSE session cleaned up: ${sessionId}`);\n                };\n\n                // Store the transport\n                sseTransports[sessionId] = transport;\n                sessionMetadata.set(sessionId, { \n                    id: sessionId, \n                    type: 'sse',\n                    created: new Date().toISOString(), \n                    uptime: 0 \n                });\n\n                // Connect to MCP server first, then start the SSE connection\n                await mcpServer.connect(transport);\n                \n                logger.info(`SSE session established: ${sessionId}`);\n            } catch (error) {\n                logger.error('Error establishing SSE connection:', error);\n                if (!res.headersSent) {\n                    res.writeHead(500, { 'Content-Type': 'application/json' });\n                    res.end(JSON.stringify({ error: 'Failed to establish SSE connection' }));\n                }\n            }\n            return;\n        }\n\n        // Messages endpoint for SSE transport (POST to send messages)\n        if (url.pathname === '/messages' && req.method === 'POST') {\n            // Collect body\n            const chunks: Uint8Array[] = [];\n            for await (const chunk of req) chunks.push(typeof chunk === 'string' ? Buffer.from(chunk) : chunk);\n            const raw = Buffer.concat(chunks).toString('utf8');\n            \n            let body: any = undefined;\n            try {\n                body = raw ? JSON.parse(raw) : undefined;\n            } catch (err) {\n                logger.warn('Invalid JSON body on /messages');\n                res.writeHead(400, { 'Content-Type': 'application/json' });\n                res.end(JSON.stringify({ error: 'Invalid JSON body' }));\n                return;\n            }\n\n            try {\n                // Find the SSE transport by session ID in headers or body\n                const sessionId = req.headers['mcp-session-id'] as string || body?.sessionId;\n                const transport = sessionId ? sseTransports[sessionId] : null;\n\n                if (!transport) {\n                    // If no specific session, try to route to any available SSE transport\n                    const availableTransports = Object.values(sseTransports);\n                    if (availableTransports.length === 0) {\n                        res.writeHead(400, { 'Content-Type': 'application/json' });\n                        res.end(JSON.stringify({ error: 'No active SSE session found' }));\n                        return;\n                    }\n                    // Use the first available transport\n                    const fallbackTransport = availableTransports[0];\n                    if (!fallbackTransport) {\n                        res.writeHead(400, { 'Content-Type': 'application/json' });\n                        res.end(JSON.stringify({ error: 'No active SSE session found' }));\n                        return;\n                    }\n                    await fallbackTransport.handlePostMessage(req, res, body);\n                } else {\n                    await transport.handlePostMessage(req, res, body);\n                }\n                \n                logger.debug(`SSE message handled for session: ${sessionId || 'auto-routed'}`);\n            } catch (error) {\n                logger.error('Error handling SSE message:', error);\n                if (!res.headersSent) {\n                    res.writeHead(500, { 'Content-Type': 'application/json' });\n                    res.end(JSON.stringify({ error: 'Failed to handle SSE message' }));\n                }\n            }\n            return;\n        }\n\n        // MCP endpoint handling (POST only in original)\n        if (url.pathname === '/mcp') {\n            // Collect body\n            const chunks: Uint8Array[] = [];\n            for await (const chunk of req) chunks.push(typeof chunk === 'string' ? Buffer.from(chunk) : chunk);\n            const raw = Buffer.concat(chunks).toString('utf8');\n            let body: any = undefined;\n            try {\n                body = raw ? JSON.parse(raw) : undefined;\n            } catch (err) {\n                logger.warn('Invalid JSON body on /mcp');\n            }\n\n            try {\n                const sessionId = req.headers['mcp-session-id'] as string | undefined;\n                let transport: StreamableHTTPServerTransport;\n\n                if (sessionId && transports[sessionId]) {\n                    transport = transports[sessionId];\n                    logger.debug(`Reusing optimized session: ${sessionId}`);\n                } else if (!sessionId && req.method === 'POST' && isInitializeRequest(body)) {\n                    logger.info('Creating new optimized Streamable HTTP session');\n                    transport = new StreamableHTTPServerTransport({\n                        sessionIdGenerator: () => randomUUID(),\n                        onsessioninitialized: (sessionId) => {\n                            transports[sessionId] = transport;\n                            sessionMetadata.set(sessionId, { id: sessionId, created: new Date().toISOString(), uptime: 0 });\n                            logger.info(`New optimized Streamable HTTP session initialized: ${sessionId}`);\n                        },\n                    });\n\n                    transport.onclose = () => {\n                        if (transport.sessionId) {\n                            delete transports[transport.sessionId];\n                            sessionMetadata.delete(transport.sessionId);\n                            logger.info(`Optimized Streamable HTTP session cleaned up: ${transport.sessionId}`);\n                        }\n                    };\n\n                    await mcpServer.connect(transport);\n                } else {\n                    logger.warn('Invalid optimized MCP request: missing session ID or invalid initialization');\n                    res.writeHead(400, { 'Content-Type': 'application/json' });\n                    res.end(JSON.stringify({ jsonrpc: '2.0', error: { code: -32000, message: 'Bad Request: No valid session ID provided or missing initialization' }, id: null }));\n                    return;\n                }\n\n                // delegate to transport\n                await transport.handleRequest(req as any, res as any, body);\n            } catch (error) {\n                logger.error('Error handling optimized Streamable HTTP request:', error);\n                if (!res.headersSent) {\n                    res.writeHead(500, { 'Content-Type': 'application/json' });\n                    res.end(JSON.stringify({ jsonrpc: '2.0', error: { code: -32603, message: 'Internal server error' }, id: null }));\n                }\n            }\n            return;\n        }\n\n        // Not found\n        res.writeHead(404, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify({ error: 'Not Found' }));\n    } catch (err) {\n        logger.error('Server error:', err);\n        try {\n            res.writeHead(500, { 'Content-Type': 'application/json' });\n            res.end(JSON.stringify({ error: 'Internal Server Error' }));\n        } catch { }\n    }\n});\n\n// Provide a minimal listen function for compatibility\napp.listen = (port: number, cb?: () => void) => server.listen(port, cb);\n\n// Instantiate the shared MCP service and get the server instance\nconst raindropMCP = new RaindropMCPService();\nconst mcpServer = raindropMCP.getServer();\nconst cleanup = raindropMCP.cleanup.bind(raindropMCP);\n\n/**\n * MCP protocol endpoint with session management and transport handling.\n */\n/**\n * Starts the MCP HTTP server and logs endpoints.\n */\nconst serverInstance = server.listen(PORT, () => {\n    logger.info(`Optimized Raindrop MCP HTTP Server running on port ${PORT}`);\n    logger.info(`MCP Inspector: npx @modelcontextprotocol/inspector http://localhost:${PORT}/mcp`);\n    logger.info(`Health check: http://localhost:${PORT}/health`);\n    logger.info(`Documentation: http://localhost:${PORT}/`);\n    logger.info(`Modern transport: http://localhost:${PORT}/mcp (StreamableHTTP)`);\n    logger.info(`Legacy transport: http://localhost:${PORT}/sse + http://localhost:${PORT}/messages (SSE)`);\n    logger.info(`Optimizations: 24 tools (vs 37 original), enhanced AI-friendly interface`);\n});\n\n/**\n * Graceful shutdown handler for SIGINT.\n */\nprocess.on('SIGINT', async () => {\n    logger.info('Shutting down optimized HTTP server...');\n    // Close all active sessions\n    logger.info(`Closing ${Object.keys(transports).length} streamable sessions and ${Object.keys(sseTransports).length} SSE sessions`);\n    \n    // Clean up streamable transports\n    Object.values(transports).forEach(transport => {\n        try {\n            transport.close();\n        } catch (error) {\n            logger.error('Error closing streamable transport:', error);\n        }\n    });\n    \n    // Clean up SSE transports\n    Object.values(sseTransports).forEach(transport => {\n        try {\n            transport.close();\n        } catch (error) {\n            logger.error('Error closing SSE transport:', error);\n        }\n    });\n    \n    sessionMetadata.clear();\n    // Close server\n    serverInstance.close(() => {\n        logger.info('Optimized HTTP server stopped');\n        process.exit(0);\n    });\n});\n\nexport { activeSessions, server as app, transports, sseTransports };\n", "import { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { z } from \"zod\";\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\nimport pkg from '../../package.json';\nimport { BookmarkInputSchema, BookmarkOutputSchema, CollectionManageInputSchema, CollectionOutputSchema, HighlightInputSchema, HighlightOutputSchema, TagInputSchema, TagOutputSchema } from \"../types/raindrop-zod.schemas.js\";\nimport RaindropService from \"./raindrop.service.js\";\n\n/**\n * Configuration for an MCP tool.\n * @see {@link https://github.com/modelcontextprotocol/typescript-sdk | MCP TypeScript SDK}\n */\ninterface ToolHandlerContext {\n    raindropService: RaindropService;\n    [key: string]: unknown;\n}\n\ninterface ToolConfig<I = unknown, O = unknown> {\n    /** Tool name (unique identifier) */\n    name: string;\n    /** Human-readable description of the tool */\n    description: string;\n    /** Zod schema for tool input */\n    inputSchema: z.ZodTypeAny;\n    /** Zod schema for tool output */\n    outputSchema?: z.ZodTypeAny;\n    /** Tool handler function */\n    handler: (args: I, context: ToolHandlerContext) => Promise<O>;\n}\n\n\n\n/**\n * MCP protocol content type for tool/resource responses.\n * @see {@link https://github.com/modelcontextprotocol/typescript-sdk | MCP TypeScript SDK}\n */\ntype McpContent =\n    | { type: \"text\"; text: string; _meta?: Record<string, unknown> }\n    | { type: \"resource_link\"; name: string; uri: string; description: string; mimeType: string; _meta?: Record<string, unknown> };\n\nconst SERVER_VERSION = pkg.version;\n\nconst defineTool = <I, O>(config: ToolConfig<I, O>) => config;\n\nconst textContent = (text: string): McpContent => ({ type: 'text', text });\n\nconst makeCollectionLink = (collection: any): McpContent => ({\n    type: 'resource_link',\n    uri: `mcp://collection/${collection._id}`,\n    name: collection.title || 'Untitled Collection',\n    description: collection.description || `Collection with ${collection.count || 0} bookmarks`,\n    mimeType: 'application/json',\n});\n\nconst makeBookmarkLink = (bookmark: any): McpContent => ({\n    type: 'resource_link',\n    uri: `mcp://raindrop/${bookmark._id}`,\n    name: bookmark.title || 'Untitled',\n    description: bookmark.excerpt || 'No description',\n    mimeType: 'application/json',\n});\n\nconst setIfDefined = (target: Record<string, unknown>, key: string, value: unknown) => {\n    if (value !== undefined) {\n        target[key] = value;\n    }\n    return target;\n};\n\nconst DiagnosticsInputSchema = z.object({\n    includeEnvironment: z.boolean().optional().describe('Include environment info'),\n});\n\nconst DiagnosticsOutputSchema = z.object({\n    content: z.array(z.object({\n        type: z.string(),\n        uri: z.string(),\n        name: z.string(),\n        description: z.string(),\n        mimeType: z.string(),\n        _meta: z.record(z.string(), z.any()),\n    })),\n});\n\nconst CollectionListInputSchema = z.object({});\n\nconst CollectionListOutputSchema = z.object({\n    content: z.array(z.object({\n        type: z.string(),\n        name: z.string().optional(),\n        uri: z.string().optional(),\n        description: z.string().optional(),\n        mimeType: z.string().optional(),\n        text: z.string().optional(),\n    })),\n});\n\nconst BookmarkSearchInputSchema = z.object({\n    search: z.string().optional().describe('Full-text search query'),\n    collection: z.number().optional().describe('Collection ID to search within'),\n    tags: z.array(z.string()).optional().describe('Tags to filter by'),\n    important: z.boolean().optional().describe('Filter by important bookmarks'),\n    page: z.number().optional().describe('Page number for pagination'),\n    perPage: z.number().optional().describe('Items per page (max 50)'),\n    sort: z.string().optional().describe('Sort order (score, title, -created, created)'),\n    tag: z.string().optional().describe('Single tag to filter by'),\n    duplicates: z.boolean().optional().describe('Include duplicate bookmarks'),\n    broken: z.boolean().optional().describe('Include broken links'),\n    highlight: z.boolean().optional().describe('Only bookmarks with highlights'),\n    domain: z.string().optional().describe('Filter by domain'),\n});\n\nconst BookmarkSearchOutputSchema = z.object({\n    items: z.array(BookmarkOutputSchema),\n    count: z.number(),\n});\n\nconst BookmarkManageInputSchema = BookmarkInputSchema.extend({\n    operation: z.enum(['create', 'update', 'delete']),\n    id: z.number().optional(),\n});\n\nconst HighlightManageInputSchema = HighlightInputSchema.extend({\n    operation: z.enum(['create', 'update', 'delete']),\n    id: z.number().optional(),\n});\n\nconst GetRaindropInputSchema = z.object({\n    id: z.string().min(1, 'Bookmark ID is required'),\n});\n\ntype CollectionManageArgs = z.infer<typeof CollectionManageInputSchema> & {\n    color?: string;\n    description?: string;\n};\n\nconst GetRaindropOutputSchema = z.object({\n    item: BookmarkOutputSchema,\n});\n\nconst ListRaindropsInputSchema = z.object({\n    collectionId: z.string().min(1, 'Collection ID is required'),\n    limit: z.number().min(1).max(100).optional(),\n});\n\nconst ListRaindropsOutputSchema = z.object({\n    items: z.array(BookmarkOutputSchema),\n    count: z.number(),\n});\n\nconst BulkEditRaindropsInputSchema = z.object({\n    collectionId: z.number().describe('Collection to update raindrops in'),\n    ids: z.array(z.number()).optional().describe('Array of raindrop IDs to update. If omitted, all in collection are updated.'),\n    important: z.boolean().optional().describe('Mark as favorite (true/false)'),\n    tags: z.array(z.string()).optional().describe('Tags to set. Empty array removes all tags.'),\n    media: z.array(z.string()).optional().describe('Media URLs to set. Empty array removes all media.'),\n    cover: z.string().optional().describe('Cover URL. Use <screenshot> for auto screenshot.'),\n    collection: z.object({ $id: z.number() }).optional().describe('Move to another collection.'),\n    nested: z.boolean().optional().describe('Include nested collections.'),\n});\n\nconst BulkEditRaindropsOutputSchema = z.object({\n    content: z.array(z.object({\n        type: z.string(),\n        text: z.string(),\n    })),\n});\n\nasync function handleDiagnostics(_args?: z.infer<typeof DiagnosticsInputSchema>, _context?: ToolHandlerContext): Promise<z.infer<typeof DiagnosticsOutputSchema>> {\n    return {\n        content: [{\n            type: 'resource_link',\n            uri: 'diagnostics://server',\n            name: 'Server Diagnostics',\n            description: `Server diagnostics and environment info resource. Version: ${SERVER_VERSION}`,\n            mimeType: 'application/json',\n            _meta: {\n                version: SERVER_VERSION,\n                mcpProtocolVersion: process.env.MCP_PROTOCOL_VERSION || 'unknown',\n                nodeVersion: process.version,\n                bunVersion: (typeof Bun !== 'undefined' ? Bun.version : undefined),\n                os: process.platform,\n                uptime: process.uptime(),\n                startTime: new Date(Date.now() - process.uptime() * 1000).toISOString(),\n                env: {\n                    NODE_ENV: process.env.NODE_ENV,\n                    MCP_DEBUG: process.env.MCP_DEBUG,\n                    MCP_TRANSPORT: process.env.MCP_TRANSPORT,\n                    RAINDROP_ACCESS_TOKEN: process.env.RAINDROP_ACCESS_TOKEN ? 'set' : 'unset',\n                },\n                enabledTools: getEnabledToolNames(),\n                apiStatus: 'unknown',\n                memory: process.memoryUsage(),\n            },\n        }],\n    };\n}\n\nasync function handleCollectionList(_args: z.infer<typeof CollectionListInputSchema>, { raindropService }: ToolHandlerContext) {\n    const collections = await raindropService.getCollections();\n    const content: McpContent[] = [\n        textContent(`Found ${collections.length} collections`),\n        ...collections.map(makeCollectionLink),\n    ];\n    return { content };\n}\n\nasync function handleCollectionManage(args: CollectionManageArgs, { raindropService }: ToolHandlerContext) {\n    switch (args.operation) {\n        case 'create':\n            if (!args.title) throw new Error('title is required for create');\n            return await raindropService.createCollection(args.title);\n        case 'update':\n            if (!args.id) throw new Error('id is required for update');\n            const updatePayload: Record<string, unknown> = {};\n            setIfDefined(updatePayload, 'title', args.title);\n            setIfDefined(updatePayload, 'color', args.color);\n            setIfDefined(updatePayload, 'description', args.description);\n            return await raindropService.updateCollection(args.id, updatePayload as any);\n        case 'delete':\n            if (!args.id) throw new Error('id is required for delete');\n            await raindropService.deleteCollection(args.id);\n            return { deleted: true };\n        default:\n            throw new Error(`Unsupported operation: ${String(args.operation)}`);\n    }\n}\n\nasync function handleBookmarkSearch(args: z.infer<typeof BookmarkSearchInputSchema>, { raindropService }: ToolHandlerContext) {\n    const query: Record<string, unknown> = {};\n    setIfDefined(query, 'search', args.search);\n    setIfDefined(query, 'collection', args.collection);\n    setIfDefined(query, 'tags', args.tags);\n    setIfDefined(query, 'important', args.important);\n    setIfDefined(query, 'page', args.page);\n    setIfDefined(query, 'perPage', args.perPage);\n    setIfDefined(query, 'sort', args.sort);\n    setIfDefined(query, 'tag', args.tag);\n    setIfDefined(query, 'duplicates', args.duplicates);\n    setIfDefined(query, 'broken', args.broken);\n    setIfDefined(query, 'highlight', args.highlight);\n    setIfDefined(query, 'domain', args.domain);\n\n    const result = await raindropService.getBookmarks(query as any);\n\n    const content: McpContent[] = [textContent(`Found ${result.count} bookmarks`)];\n    result.items.forEach((bookmark: any) => {\n        content.push(makeBookmarkLink(bookmark));\n    });\n\n    return { content };\n}\n\nasync function handleBookmarkManage(args: z.infer<typeof BookmarkManageInputSchema>, { raindropService }: ToolHandlerContext) {\n    switch (args.operation) {\n        case 'create':\n            if (!args.collectionId) throw new Error('collectionId is required for create');\n            const createPayload: Record<string, unknown> = {\n                link: args.url,\n                title: args.title,\n            };\n            setIfDefined(createPayload, 'excerpt', args.description);\n            setIfDefined(createPayload, 'tags', args.tags);\n            setIfDefined(createPayload, 'important', args.important);\n            return await raindropService.createBookmark(args.collectionId, createPayload as any);\n        case 'update':\n            if (!args.id) throw new Error('id is required for update');\n            const updatePayload: Record<string, unknown> = {\n                link: args.url,\n                title: args.title,\n            };\n            setIfDefined(updatePayload, 'excerpt', args.description);\n            setIfDefined(updatePayload, 'tags', args.tags);\n            setIfDefined(updatePayload, 'important', args.important);\n            return await raindropService.updateBookmark(args.id, updatePayload as any);\n        case 'delete':\n            if (!args.id) throw new Error('id is required for delete');\n            await raindropService.deleteBookmark(args.id);\n            return { deleted: true };\n        default:\n            throw new Error(`Unsupported operation: ${String(args.operation)}`);\n    }\n}\n\nasync function handleTagManage(args: z.infer<typeof TagInputSchema>, { raindropService }: ToolHandlerContext) {\n    switch (args.operation) {\n        case 'rename':\n            if (!args.tagNames || !args.newName) throw new Error('tagNames and newName required for rename');\n            const [primaryTag] = args.tagNames;\n            if (!primaryTag) throw new Error('tagNames must include at least one value');\n            return await raindropService.renameTag(args.collectionId, primaryTag, args.newName!);\n        case 'merge':\n            if (!args.tagNames || !args.newName) throw new Error('tagNames and newName required for merge');\n            return await raindropService.mergeTags(args.collectionId, args.tagNames, args.newName!);\n        case 'delete':\n            if (!args.tagNames) throw new Error('tagNames required for delete');\n            return await raindropService.deleteTags(args.collectionId, args.tagNames);\n        default:\n            throw new Error(`Unsupported operation: ${String(args.operation)}`);\n    }\n}\n\nasync function handleHighlightManage(args: z.infer<typeof HighlightManageInputSchema>, { raindropService }: ToolHandlerContext) {\n    switch (args.operation) {\n        case 'create':\n            if (!args.bookmarkId || !args.text) throw new Error('bookmarkId and text required for create');\n            const createPayload: Record<string, unknown> = { text: args.text };\n            setIfDefined(createPayload, 'note', args.note);\n            setIfDefined(createPayload, 'color', args.color);\n            return await raindropService.createHighlight(args.bookmarkId, createPayload as any);\n        case 'update':\n            if (!args.id) throw new Error('id required for update');\n            const updatePayload: Record<string, unknown> = {};\n            setIfDefined(updatePayload, 'text', args.text);\n            setIfDefined(updatePayload, 'note', args.note);\n            setIfDefined(updatePayload, 'color', args.color);\n            return await raindropService.updateHighlight(args.id, updatePayload as any);\n        case 'delete':\n            if (!args.id) throw new Error('id required for delete');\n            await raindropService.deleteHighlight(args.id);\n            return { deleted: true };\n        default:\n            throw new Error(`Unsupported operation: ${String(args.operation)}`);\n    }\n}\n\nasync function handleGetRaindrop(args: z.infer<typeof GetRaindropInputSchema>, { raindropService }: ToolHandlerContext) {\n    const bookmark = await raindropService.getBookmark(parseInt(args.id));\n    return {\n        content: [makeBookmarkLink(bookmark)],\n    };\n}\n\nasync function handleListRaindrops(args: z.infer<typeof ListRaindropsInputSchema>, { raindropService }: ToolHandlerContext) {\n    const result = await raindropService.getBookmarks({\n        collection: parseInt(args.collectionId),\n        perPage: args.limit || 50,\n    });\n\n    const content: McpContent[] = [textContent(`Found ${result.count} bookmarks in collection`)];\n    result.items.forEach((bookmark: any) => content.push(makeBookmarkLink(bookmark)));\n\n    return { content };\n}\n\nasync function handleBulkEditRaindrops(args: z.infer<typeof BulkEditRaindropsInputSchema>, _context?: ToolHandlerContext) {\n    const body: Record<string, unknown> = {};\n    if (args.ids) body.ids = args.ids;\n    if (args.important !== undefined) body.important = args.important;\n    if (args.tags) body.tags = args.tags;\n    if (args.media) body.media = args.media;\n    if (args.cover) body.cover = args.cover;\n    if (args.collection) body.collection = args.collection;\n    if (args.nested !== undefined) body.nested = args.nested;\n\n    const url = `https://api.raindrop.io/rest/v1/raindrops/${args.collectionId}`;\n    try {\n        const response = await fetch(url, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        });\n        const result = await response.json() as { result: boolean; errorMessage?: string; modified?: number };\n        if (!result.result) {\n            throw new Error(result.errorMessage || 'Bulk edit failed');\n        }\n        return {\n            content: [{\n                type: 'text',\n                text: `Bulk edit successful. Modified: ${result.modified ?? 'unknown'}`,\n            }],\n        };\n    } catch (err) {\n        return {\n            content: [{\n                type: 'text',\n                text: `Bulk edit error: ${(err as Error).message}`,\n            }],\n            isError: true,\n        };\n    }\n}\n\nconst diagnosticsTool = defineTool({\n    name: 'diagnostics',\n    description: 'Provides server diagnostics and environment info. Use includeEnvironment param for detailed info.',\n    inputSchema: DiagnosticsInputSchema,\n    outputSchema: DiagnosticsOutputSchema,\n    handler: handleDiagnostics,\n});\n\nconst collectionListTool = defineTool({\n    name: 'collection_list',\n    description: 'Lists all Raindrop collections for the authenticated user.',\n    inputSchema: CollectionListInputSchema,\n    outputSchema: CollectionListOutputSchema,\n    handler: handleCollectionList,\n});\n\nconst collectionManageTool = defineTool({\n    name: 'collection_manage',\n    description: 'Creates, updates, or deletes a collection. Use the operation parameter to specify the action.',\n    inputSchema: CollectionManageInputSchema,\n    outputSchema: CollectionOutputSchema,\n    handler: handleCollectionManage,\n});\n\nconst bookmarkSearchTool = defineTool({\n    name: 'bookmark_search',\n    description: 'Searches bookmarks with advanced filters, tags, and full-text search.',\n    inputSchema: BookmarkSearchInputSchema,\n    outputSchema: BookmarkSearchOutputSchema,\n    handler: handleBookmarkSearch,\n});\n\nconst bookmarkManageTool = defineTool({\n    name: 'bookmark_manage',\n    description: 'Creates, updates, or deletes bookmarks. Use the operation parameter to specify the action.',\n    inputSchema: BookmarkManageInputSchema,\n    outputSchema: BookmarkOutputSchema,\n    handler: handleBookmarkManage,\n});\n\nconst tagManageTool = defineTool({\n    name: 'tag_manage',\n    description: 'Renames, merges, or deletes tags. Use the operation parameter to specify the action.',\n    inputSchema: TagInputSchema,\n    outputSchema: TagOutputSchema,\n    handler: handleTagManage,\n});\n\nconst highlightManageTool = defineTool({\n    name: 'highlight_manage',\n    description: 'Creates, updates, or deletes highlights. Use the operation parameter to specify the action.',\n    inputSchema: HighlightManageInputSchema,\n    outputSchema: HighlightOutputSchema,\n    handler: handleHighlightManage,\n});\n\nconst getRaindropTool = defineTool({\n    name: 'getRaindrop',\n    description: 'Fetch a single Raindrop.io bookmark by ID.',\n    inputSchema: GetRaindropInputSchema,\n    outputSchema: GetRaindropOutputSchema,\n    handler: handleGetRaindrop,\n});\n\nconst listRaindropsTool = defineTool({\n    name: 'listRaindrops',\n    description: 'List Raindrop.io bookmarks for a collection.',\n    inputSchema: ListRaindropsInputSchema,\n    outputSchema: ListRaindropsOutputSchema,\n    handler: handleListRaindrops,\n});\n\nconst bulkEditRaindropsTool = defineTool({\n    name: 'bulk_edit_raindrops',\n    description: 'Bulk update tags, favorite status, media, cover, or move bookmarks to another collection.',\n    inputSchema: BulkEditRaindropsInputSchema,\n    outputSchema: BulkEditRaindropsOutputSchema,\n    handler: handleBulkEditRaindrops,\n});\n\n// --- Declarative tool configs ---\nconst toolConfigs: ToolConfig<any, any>[] = [\n    diagnosticsTool,\n    collectionListTool,\n    collectionManageTool,\n    bookmarkSearchTool,\n    bookmarkManageTool,\n    tagManageTool,\n    highlightManageTool,\n    getRaindropTool,\n    listRaindropsTool,\n    bulkEditRaindropsTool,\n    // ...add more tools as needed, following the same pattern...\n];\n\nfunction getEnabledToolNames(): string[] {\n    return toolConfigs.map(tool => tool.name);\n}\n\n// --- MCP Server class ---\n/**\n * Main MCP server implementation for Raindrop.io.\n * Wraps the MCP SDK server and exposes Raindrop tools/resources.\n * @see {@link https://github.com/modelcontextprotocol/typescript-sdk | MCP TypeScript SDK}\n * @see McpServer\n */\nexport class RaindropMCPService {\n    private server: McpServer;\n    public raindropService: RaindropService;\n    private resources: Record<string, any> = {};\n\n    /**\n     * Expose the MCP server instance for external control (e.g., connect, close).\n     */\n    public getServer() {\n        return this.server;\n    }\n\n    /**\n     * Expose a cleanup method for graceful shutdown (no-op by default).\n     * Extend as needed for resource cleanup.\n     */\n    public async cleanup() {\n        // Add any additional cleanup logic here if needed\n    }\n\n    /**\n     * Returns the MCP manifest and server capabilities for host integration and debugging.\n     * Uses the SDK's getManifest() method if available, otherwise builds a manifest from registered tools/resources.\n     */\n    public async getManifest(): Promise<unknown> {\n        if (typeof (this.server as any).getManifest === 'function') {\n            return (this.server as any).getManifest();\n        }\n        // Fallback: build manifest manually\n        return {\n            name: \"raindrop-mcp\",\n            version: SERVER_VERSION,\n            description: \"MCP Server for Raindrop.io with advanced interactive capabilities\",\n            capabilities: (this.server as any).capabilities,\n            tools: await this.listTools(),\n            // Optionally add resources, schemas, etc.\n        };\n    }\n\n    constructor() {\n        this.raindropService = new RaindropService();\n        this.server = new McpServer({\n            name: \"raindrop-mcp\",\n            version: SERVER_VERSION,\n            description: \"MCP Server for Raindrop.io with advanced interactive capabilities\",\n            capabilities: {\n                logging: false,\n                discovery: true,\n                errorStandardization: true,\n                sessionInfo: true,\n                toolChaining: true,\n                schemaExport: true,\n                promptManagement: true,\n                resources: true,\n                sampling: { supported: true, description: \"All list/search tools support sampling and pagination.\" },\n                elicitation: { supported: true, description: \"Destructive and ambiguous actions require confirmation or clarification.\" }\n            }\n        });\n        this.registerDeclarativeTools();\n        this.registerResources();\n    }\n\n    private asyncHandler<T extends (...args: any[]) => Promise<any>>(fn: T): T {\n        return (async (...args: Parameters<T>): Promise<ReturnType<T>> => {\n            try {\n                return await fn(...args);\n            } catch (err) {\n                if (err instanceof Error) throw err;\n                throw new Error(String(err));\n            }\n        }) as T;\n    }\n\n    private registerDeclarativeTools() {\n        for (const config of toolConfigs) {\n            this.server.registerTool(\n                config.name,\n                {\n                    title: config.name.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\n                    description: config.description,\n                    inputSchema: config.inputSchema\n                },\n                this.asyncHandler(async (args: any, extra: any) => {\n                    const result = await config.handler(args, { raindropService: this.raindropService, ...extra });\n                    // Ensure result has content field for MCP protocol\n                    if (result && typeof result === 'object' && 'content' in result) {\n                        return result;\n                    }\n                    // Wrap non-content results in content field\n                    return { content: [{ type: 'text', text: JSON.stringify(result, null, 2) }] };\n                })\n            );\n        }\n    }\n\n    private registerResources() {\n        // Register static resources only (user profile and diagnostics)\n        this.resources['mcp://user/profile'] = {\n            contents: [{\n                uri: 'mcp://user/profile',\n                text: JSON.stringify({ profile: 'User profile information from Raindrop.io' }, null, 2)\n            }]\n        };\n\n        this.resources['diagnostics://server'] = {\n            contents: [{\n                uri: 'diagnostics://server',\n                text: JSON.stringify({\n                    diagnostics: 'Server diagnostics and environment info',\n                    version: SERVER_VERSION,\n                    timestamp: new Date().toISOString()\n                }, null, 2)\n            }]\n        };\n\n        // Note: Collection and raindrop resources are now handled dynamically\n        // in readResource() method - no pre-registration needed\n    }\n\n\n    /**\n     * Returns a list of all registered MCP tools with their metadata.\n     */\n    public async listTools(): Promise<Array<{\n        id: string;\n        name: string;\n        description: string;\n        inputSchema: unknown;\n        outputSchema: unknown;\n    }>> {\n        // Return all registered tools from the MCP server, ensuring each has a description\n        const tools = ((this.server as any)._tools || []).map((tool: any) => ({\n            id: tool.id || tool.name,\n            name: tool.name,\n            description: tool.description || '',\n            inputSchema: tool.inputSchema || {},\n            outputSchema: tool.outputSchema || {},\n        }));\n\n        // Also include tools from our toolConfigs if the server's _tools is empty\n        if (tools.length === 0) {\n            return toolConfigs.map(config => ({\n                id: config.name,\n                name: config.name.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\n                description: config.description,\n                inputSchema: config.inputSchema,\n                outputSchema: config.outputSchema || {}\n            }));\n        }\n\n        return tools.filter((tool: any) => tool.description);\n    }\n\n    /**\n     * Call a registered tool by its ID with the given input.\n     * @param toolId - The tool's ID\n     * @param input - Input object for the tool\n     * @returns Tool response\n     */\n    public async callTool(toolId: string, input: any): Promise<any> {\n        const tool = (this.server as any)._tools?.find((t: any) => t.id === toolId);\n        if (!tool || typeof tool.handler !== 'function') {\n            throw new Error(`Tool with id \"${toolId}\" not found or has no handler.`);\n        }\n        // Defensive: ensure input is always an object\n        return await tool.handler(input ?? {}, {});\n    }\n\n    /**\n     * Reads an MCP resource by URI using the public API.\n     * Supports both static pre-registered resources and dynamic resources.\n     *\n     * @param uri - The resource URI to read.\n     * @returns The resource contents as an array of objects with uri and text.\n     * @throws Error if the resource is not found or not readable.\n     */\n    public async readResource(uri: string): Promise<{ contents: any[] }> {\n        // Handle dynamic resources first (no pre-registration required)\n        try {\n            if (uri.startsWith('mcp://collection/')) {\n                const uriParts = uri.split('/');\n                const collectionIdStr = uriParts[uriParts.length - 1];\n                if (!collectionIdStr) {\n                    throw new Error('Collection ID is required');\n                }\n                const collectionId = parseInt(collectionIdStr);\n                if (isNaN(collectionId)) {\n                    throw new Error(`Invalid collection ID: ${collectionIdStr}`);\n                }\n                const collection = await this.raindropService.getCollection(collectionId);\n                return {\n                    contents: [{\n                        uri,\n                        text: JSON.stringify({ collection }, null, 2)\n                    }]\n                };\n            }\n\n            if (uri.startsWith('mcp://raindrop/')) {\n                const uriParts = uri.split('/');\n                const raindropIdStr = uriParts[uriParts.length - 1];\n                if (!raindropIdStr) {\n                    throw new Error('Raindrop ID is required');\n                }\n                const raindropId = parseInt(raindropIdStr);\n                if (isNaN(raindropId)) {\n                    throw new Error(`Invalid raindrop ID: ${raindropIdStr}`);\n                }\n                const raindrop = await this.raindropService.getBookmark(raindropId);\n                return {\n                    contents: [{\n                        uri,\n                        text: JSON.stringify({ raindrop }, null, 2)\n                    }]\n                };\n            }\n\n            if (uri === 'mcp://user/profile') {\n                const userInfo = await this.raindropService.getUserInfo();\n                return {\n                    contents: [{\n                        uri,\n                        text: JSON.stringify({ profile: userInfo }, null, 2)\n                    }]\n                };\n            }\n        } catch (error) {\n            // If API call fails for dynamic resources, throw error with context\n            throw new Error(`Failed to fetch data for resource ${uri}: ${error instanceof Error ? error.message : String(error)}`);\n        }\n\n        // Handle static pre-registered resources\n        if (!this.resources[uri]) {\n            throw new Error(`Resource with uri \"${uri}\" not found or not readable.`);\n        }\n\n        const resource = this.resources[uri];\n        return {\n            contents: Array.isArray(resource.contents) ? resource.contents : [resource.contents]\n        };\n    }\n\n    /**\n     * Returns a list of all available MCP resources with their metadata.\n     * Includes both static pre-registered resources and dynamic resource patterns.\n     */\n    public listResources(): Array<{ id: string; uri: string; title?: string; description?: string; mimeType?: string }> {\n        const serverResources = ((this.server as any)._resources || []).map((r: any) => ({\n            id: r.id || r.uri,\n            uri: r.uri,\n            title: r.title,\n            description: r.description,\n            mimeType: r.mimeType,\n        }));\n\n        // Include our static resources and dynamic resource patterns\n        const staticResources = Object.keys(this.resources).map(uri => ({\n            id: uri,\n            uri,\n            title: `Resource ${uri}`,\n            description: `MCP resource for ${uri}`,\n            mimeType: 'application/json'\n        }));\n\n        // Add dynamic resource patterns for documentation\n        const dynamicResourcePatterns = [\n            {\n                id: 'mcp://collection/{id}',\n                uri: 'mcp://collection/{id}',\n                title: 'Collection Resource Pattern',\n                description: 'Access any Raindrop collection by ID (e.g., mcp://collection/123456)',\n                mimeType: 'application/json'\n            },\n            {\n                id: 'mcp://raindrop/{id}',\n                uri: 'mcp://raindrop/{id}',\n                title: 'Raindrop Resource Pattern',\n                description: 'Access any Raindrop bookmark by ID (e.g., mcp://raindrop/987654)',\n                mimeType: 'application/json'\n            }\n        ];\n\n        // Combine all resources: server resources, static resources, and dynamic patterns\n        return [\n            ...serverResources,\n            ...staticResources,\n            ...dynamicResourcePatterns\n        ];\n    }\n\n    /**\n     * Returns true if the MCP server is healthy and ready.\n     */\n    public async healthCheck(): Promise<boolean> {\n        // Optionally, check connectivity to Raindrop.io or other dependencies\n        return true;\n    }\n\n    /**\n     * Returns basic server info (name, version, description).\n     */\n    public getInfo(): { name: string; version: string; description: string } {\n        return {\n            name: \"raindrop-mcp-server\",\n            version: SERVER_VERSION,\n            description: \"MCP Server for Raindrop.io with advanced interactive capabilities\"\n        };\n    }\n}\n", "{\n    \"name\": \"@anansitrading/raindrop-mcp\",\n    \"version\": \"2.0.18\",\n    \"description\": \"MCP Server for Raindrop.io bookmark management\",\n    \"main\": \"build/index.js\",\n    \"module\": \"build/index.js\",\n    \"type\": \"module\",\n    \"bin\": {\n        \"raindrop-mcp\": \"./build/index.js\"\n    },\n    \"files\": [\n        \"build\"\n    ],\n    \"private\": false,\n    \"scripts\": {\n        \"dev\": \"bun run build && bun --watch src/index.ts\",\n        \"dev:http\": \"bun run build && bun --watch src/server.ts\",\n        \"inspector\": \"npx @modelcontextprotocol/inspector node build/index.js\",\n        \"inspector:http-server\": \"npx @modelcontextprotocol/inspector node build/server.js\",\n        \"type-check\": \"tsc --noEmit\",\n        \"test\": \"bun  --env-file .env test\",\n        \"test:coverage\": \"bun test --coverage\",\n        \"run\": \"bun run build/index.js\",\n        \"build\": \"esbuild src/index.ts src/server.ts --bundle --platform=node --format=esm --sourcemap --outdir=build --external:@modelcontextprotocol/* --external:express --external:axios --external:dotenv --external:openapi-fetch --external:rate-limiter-flexible --external:simple-oauth2 --external:zod --external:zod-to-json-schema --external:openai\",\n        \"start:prod\": \"bun run build/index.js\",\n        \"start:http\": \"bun run src/server.ts\",\n        \"clean\": \"rm -rf build\",\n        \"bump:patch\": \"bun pm version patch\",\n        \"bump:minor\": \"bun pm version minor\",\n        \"bump:major\": \"bun pm version major\",\n        \"bun:update\": \"bun update\",\n        \"dxt:pack\": \"npx @anthropic-ai/mcpb@latest pack && mcpb clean raindrop-mcp.dxt\",\n        \"generate:schema\": \"npx openapi-typescript ./raindrop-complete.yaml -o ./src/types/raindrop.schema.d.ts --tsconfig ./tsconfig.json --export-type --useUnionTypes --immutable\",\n        \"generate:client\": \"npx @openapitools/openapi-generator-cli generate -i ./raindrop-complete.yaml -g typescript-axios -o src/services/raindrop-client\",\n        \"bun:publish:github\": \"bun publish --registry=https://npm.pkg.github.com/ --access public\",\n        \"bun:publish:npm\": \"bun publish --access public\",\n        \"tag:version\": \"git tag v$(jq -r .version package.json) && git push origin master && git push origin v$(jq -r .version package.json)\",\n        \"release:dxt\": \"bun run dxt:pack && gh release create v$(jq -r .version package.json) raindrop-mcp.dxt --title \\\"Release v$(jq -r .version package.json)\\\" --notes \\\"DXT manifest for MCP\\\"\",\n        \"docs\": \"typedoc\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/adeze/raindrop-mcp.git\"\n    },\n    \"publishConfig\": {\n        \"access\": \"public\",\n        \"registry\": \"https://registry.npmjs.org/\"\n    },\n    \"keywords\": [\n        \"mcp\",\n        \"raindrop.io\",\n        \"modelcontextprotocol\",\n        \"mcp-server\",\n        \"raindrop\",\n        \"bookmarks\",\n        \"ai-assistant\",\n        \"llm-tools\",\n        \"typescript\"\n    ],\n    \"author\": \"Adam E\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/adeze/raindrop-mcp/issues\"\n    },\n    \"homepage\": \"https://github.com/adeze/raindrop-mcp#readme\",\n    \"dependencies\": {\n        \"@modelcontextprotocol/sdk\": \"^1.18.0\",\n        \"axios\": \"^1.12.2\",\n        \"dotenv\": \"^17.2.2\",\n        \"esm\": \"^3.2.25\",\n        \"express\": \"^5.1.0\",\n        \"openai\": \"^5.20.3\",\n        \"openapi-fetch\": \"^0.14.0\",\n        \"rate-limiter-flexible\": \"^7.3.1\",\n        \"simple-oauth2\": \"^5.1.0\",\n        \"zod\": \"3.24.1\",\n        \"zod-to-json-schema\": \"^3.24.6\"\n    },\n    \"devDependencies\": {\n        \"@anthropic-ai/dxt\": \"^0.2.6\",\n        \"@modelcontextprotocol/inspector\": \"^0.16.7\",\n        \"@openapitools/openapi-generator-cli\": \"^2.23.4\",\n        \"@types/bun\": \"^1.2.22\",\n        \"@types/express\": \"^5.0.3\",\n        \"@types/node\": \"^24.5.1\",\n        \"@vitest/coverage-v8\": \"^3.2.4\",\n        \"esbuild\": \"^0.25.10\",\n        \"openapi-typescript\": \"^7.9.1\",\n        \"typedoc\": \"^0.28.13\",\n        \"typescript\": \"^5.9.2\",\n        \"vitest\": \"^3.2.4\"\n    },\n    \"engines\": {\n        \"node\": \">=18.0.0\",\n        \"bun\": \">=1.0.0\"\n    }\n}\n", "import { z } from \"zod\";\n\n/**\n * Input schema for managing Raindrop collections (CRUD).\n * @see {@link https://developer.raindrop.io/}\n */\nexport const CollectionManageInputSchema = z.object({\n    operation: z.enum(['create', 'update', 'delete']),\n    id: z.number().optional(),\n    title: z.string().optional(),\n    parentId: z.number().optional(),\n});\n\n/**\n * Input schema for Raindrop bookmark tools.\n * @see {@link https://developer.raindrop.io/} for API details.\n */\nexport const BookmarkInputSchema = z.object({\n    url: z.string().url(),\n    title: z.string(),\n    tags: z.array(z.string()).optional(),\n    important: z.boolean().optional(),\n    collectionId: z.number().optional(),\n    description: z.string().optional(),\n});\n\n/**\n * Output schema for Raindrop bookmark tools.\n * @see {@link https://developer.raindrop.io/}\n */\nexport const BookmarkOutputSchema = z.object({\n    id: z.number(),\n    url: z.string().url(),\n    title: z.string(),\n    tags: z.array(z.string()).optional(),\n    important: z.boolean().optional(),\n    collectionId: z.number().optional(),\n    description: z.string().optional(),\n});\n\n/**\n * Input schema for Raindrop collection tools.\n * @see {@link https://developer.raindrop.io/}\n */\nexport const CollectionInputSchema = z.object({\n    title: z.string(),\n    description: z.string().optional(),\n    color: z.string().optional(),\n    parentId: z.number().optional(),\n});\n\n/**\n * Output schema for Raindrop collection tools.\n * @see {@link https://developer.raindrop.io/}\n */\nexport const CollectionOutputSchema = z.object({\n    id: z.number(),\n    title: z.string(),\n    description: z.string().optional(),\n    color: z.string().optional(),\n    parentId: z.number().optional(),\n});\n\n/**\n * Input schema for Raindrop highlight tools.\n * @see {@link https://developer.raindrop.io/}\n */\nexport const HighlightInputSchema = z.object({\n    bookmarkId: z.number(),\n    text: z.string(),\n    note: z.string().optional(),\n    color: z.string().optional(),\n});\n\n/**\n * Output schema for Raindrop highlight tools.\n * @see {@link https://developer.raindrop.io/}\n */\nexport const HighlightOutputSchema = z.object({\n    id: z.number(),\n    bookmarkId: z.number(),\n    text: z.string(),\n    note: z.string().optional(),\n    color: z.string().optional(),\n});\n\n/**\n * Input schema for Raindrop tag tools.\n * @see {@link https://developer.raindrop.io/}\n */\nexport const TagInputSchema = z.object({\n    collectionId: z.number().optional(),\n    tagNames: z.array(z.string()),\n    newName: z.string().optional(),\n    operation: z.enum([\"rename\", \"merge\", \"delete\"]),\n});\n\n/**\n * Output schema for Raindrop tag tools.\n * @see {@link https://developer.raindrop.io/}\n */\nexport const TagOutputSchema = z.object({\n    tagNames: z.array(z.string()),\n    success: z.boolean(),\n});\n\n/**\n * Output schema for diagnostics tool.\n * @see {@link https://github.com/modelcontextprotocol/typescript-sdk}\n */\nexport const DiagnosticsOutputSchema = z.object({\n    status: z.string(),\n    environment: z.record(z.string(), z.any()).optional(),\n});\n\n/**\n * Schema for Raindrop tag objects.\n * @see {@link https://developer.raindrop.io/}\n */\n// ...existing code...\n\nexport const tagSchema = z.object({\n    _id: z.string(),\n    count: z.number().optional(),\n    name: z.string().optional(),\n});\n", "// Simple, clean openapi-fetch REST client\nimport createClient from 'openapi-fetch';\nimport type { components, paths } from '../types/raindrop.schema.js';\nimport { createLogger } from '../utils/logger.js';\n\ntype Bookmark = components['schemas']['Bookmark'];\ntype Collection = components['schemas']['Collection'];\ntype Highlight = components['schemas']['Highlight'];\n\n\nexport default class RaindropService {\n  private client;\n\n  constructor(token?: string) {\n    this.client = createClient<paths>({\n      baseUrl: 'https://api.raindrop.io/rest/v1',\n      headers: {\n        Authorization: `Bearer ${token || process.env.RAINDROP_ACCESS_TOKEN}`,\n      },\n    });\n    this.client.use({\n      onRequest({ request }) {\n        if (process.env.NODE_ENV === 'development') {\n          // Use project logger instead of console to avoid polluting STDIO\n          const logger = createLogger('raindrop-service');\n          logger.debug(`${request.method} ${request.url}`);\n        }\n        return request;\n      },\n      onResponse({ response }) {\n        if (!response.ok) {\n          let errorMsg = `API Error: ${response.status} ${response.statusText}`;\n          if (response.status === 401) {\n            errorMsg += '. Check your RAINDROP_ACCESS_TOKEN';\n          } else if (response.status === 429) {\n            errorMsg += '. Rate limited - wait before making more requests';\n          }\n          throw new Error(errorMsg);\n        }\n        return response;\n      }\n    });\n  }\n\n  /**\n   * Fetch all collections\n   * Raindrop.io API: GET /collections\n   */\n  async getCollections(): Promise<Collection[]> {\n    const { data } = await this.client.GET('/collections');\n    return [...(data?.items || [])];\n  }\n\n  /**\n   * Fetch a single collection by ID\n   * Raindrop.io API: GET /collection/{id}\n   */\n  async getCollection(id: number): Promise<Collection> {\n    const { data } = await this.client.GET('/collection/{id}', {\n      params: { path: { id } }\n    });\n    if (!data?.item) throw new Error('Collection not found');\n    return data.item;\n  }\n\n  /**\n   * Fetch child collections for a parent collection\n   * Raindrop.io API: GET /collections/{parentId}/childrens\n   */\n  async getChildCollections(parentId: number): Promise<Collection[]> {\n    const { data } = await this.client.GET('/collections/{parentId}/childrens', {\n      params: { path: { parentId } }\n    });\n    return [...(data?.items || [])];\n  }\n\n  /**\n   * Create a new collection\n   * Raindrop.io API: POST /collection\n   */\n  async createCollection(title: string, isPublic = false): Promise<Collection> {\n    const { data } = await this.client.POST('/collection', {\n      body: { title, public: isPublic }\n    });\n    if (!data?.item) throw new Error('Failed to create collection');\n    return data.item;\n  }\n\n  /**\n   * Update a collection\n   * Raindrop.io API: PUT /collection/{id}\n   */\n  async updateCollection(id: number, updates: Partial<Collection>): Promise<Collection> {\n    const { data } = await this.client.PUT('/collection/{id}', {\n      params: { path: { id } },\n      body: updates\n    });\n    if (!data?.item) throw new Error('Failed to update collection');\n    return data.item;\n  }\n\n  /**\n   * Delete a collection\n   * Raindrop.io API: DELETE /collection/{id}\n   */\n  async deleteCollection(id: number): Promise<void> {\n    await this.client.DELETE('/collection/{id}', {\n      params: { path: { id } }\n    });\n  }\n\n  /**\n   * Share a collection\n   * Raindrop.io API: PUT /collection/{id}/sharing\n   */\n  async shareCollection(id: number, level: string, emails?: string[]): Promise<{ link: string; access: any[] }> {\n    const body: any = { level };\n    if (emails) body.emails = emails;\n    const { data } = await this.client.PUT('/collection/{id}/sharing', {\n      params: { path: { id } },\n      body\n    });\n    return { link: data?.link || '', access: [...(data?.access || [])] };\n  }\n\n  /**\n   * Fetch bookmarks (search, filter, etc)\n   * Raindrop.io API: GET /raindrops/{collectionId} or /raindrops/0\n   */\n  async getBookmarks(params: {\n    search?: string;\n    collection?: number;\n    tags?: string[];\n    important?: boolean;\n    page?: number;\n    perPage?: number;\n    sort?: string;\n    tag?: string;\n    duplicates?: boolean;\n    broken?: boolean;\n    highlight?: boolean;\n    domain?: string;\n  } = {}): Promise<{ items: Bookmark[]; count: number }> {\n    const query: any = {};\n    if (params.search) query.search = params.search;\n    if (params.tags) query.tag = params.tags.join(',');\n    if (params.tag) query.tag = params.tag;\n    if (params.important !== undefined) query.important = params.important;\n    if (params.page) query.page = params.page;\n    if (params.perPage) query.perpage = params.perPage;\n    if (params.sort) query.sort = params.sort;\n    if (params.duplicates !== undefined) query.duplicates = params.duplicates;\n    if (params.broken !== undefined) query.broken = params.broken;\n    if (params.highlight !== undefined) query.highlight = params.highlight;\n    if (params.domain) query.domain = params.domain;\n    const endpoint = params.collection ? '/raindrops/{id}' : '/raindrops/0';\n    const options = params.collection\n      ? { params: { path: { id: params.collection }, query } }\n      : { params: { query } };\n    const { data } = await (this.client as any).GET(endpoint, options);\n    return {\n      items: data?.items || [],\n      count: data?.count || 0\n    };\n  }\n\n  /**\n   * Fetch a single bookmark by ID\n   * Raindrop.io API: GET /raindrop/{id}\n   */\n  async getBookmark(id: number): Promise<Bookmark> {\n    const { data } = await this.client.GET('/raindrop/{id}', {\n      params: { path: { id } }\n    });\n    if (!data?.item) throw new Error('Bookmark not found');\n    return data.item;\n  }\n\n  /**\n   * Create a new bookmark\n   * Raindrop.io API: POST /raindrop\n   */\n  async createBookmark(collectionId: number, bookmark: {\n    link: string;\n    title?: string;\n    excerpt?: string;\n    tags?: string[];\n    important?: boolean;\n  }): Promise<Bookmark> {\n    const { data } = await this.client.POST('/raindrop', {\n      body: {\n        link: bookmark.link,\n        ...(bookmark.title && { title: bookmark.title }),\n        ...(bookmark.excerpt && { excerpt: bookmark.excerpt }),\n        ...(bookmark.tags && { tags: bookmark.tags }),\n        important: bookmark.important || false,\n        collection: { $id: collectionId },\n        pleaseParse: {}\n      }\n    });\n    if (!data?.item) throw new Error('Failed to create bookmark');\n    return data.item;\n  }\n\n  /**\n   * Update a bookmark\n   * Raindrop.io API: PUT /raindrop/{id}\n   */\n  async updateBookmark(id: number, updates: Partial<Bookmark>): Promise<Bookmark> {\n    const { data } = await this.client.PUT('/raindrop/{id}', {\n      params: { path: { id } },\n      body: updates\n    });\n    if (!data?.item) throw new Error('Failed to update bookmark');\n    return data.item;\n  }\n\n  /**\n   * Delete a bookmark\n   * Raindrop.io API: DELETE /raindrop/{id}\n   */\n  async deleteBookmark(id: number): Promise<void> {\n    await this.client.DELETE('/raindrop/{id}', {\n      params: { path: { id } }\n    });\n  }\n\n  /**\n   * Batch update bookmarks\n   * Raindrop.io API: PUT /raindrops\n   */\n  async batchUpdateBookmarks(ids: number[], updates: {\n    tags?: string[];\n    collection?: number;\n    important?: boolean;\n    broken?: boolean;\n  }): Promise<boolean> {\n    const body: any = { ids };\n    if (updates.tags) body.tags = updates.tags;\n    if (updates.collection) body.collection = { $id: updates.collection };\n    if (updates.important !== undefined) body.important = updates.important;\n    if (updates.broken !== undefined) body.broken = updates.broken;\n    const { data } = await this.client.PUT('/raindrops', { body });\n    return !!data?.result;\n  }\n\n  /**\n   * Fetch tags for a collection or all\n   * Raindrop.io API: GET /tags/{collectionId} or /tags/0\n   */\n  async getTags(collectionId?: number): Promise<{ _id: string; count: number }[]> {\n    const endpoint = collectionId ? '/tags/{collectionId}' : '/tags/0';\n    const options = collectionId\n      ? { params: { path: { id: collectionId } } }\n      : undefined;\n    const { data } = await (this.client as any).GET(endpoint, options);\n    return data?.items || [];\n  }\n\n  /**\n   * Fetch tags for a specific collection\n   * Raindrop.io API: GET /tags/{collectionId}\n   */\n  async getTagsByCollection(collectionId: number): Promise<{ _id: string; count: number }[]> {\n    return this.getTags(collectionId);\n  }\n\n  /**\n   * Delete tags from a collection\n   * Raindrop.io API: DELETE /tags/{collectionId}\n   */\n  async deleteTags(collectionId: number | undefined, tags: string[]): Promise<boolean> {\n    const endpoint = collectionId ? '/tags/{collectionId}' : '/tags/0';\n    const options = {\n      ...(collectionId && { params: { path: { id: collectionId } } }),\n      body: { tags }\n    };\n    const { data } = await (this.client as any).DELETE(endpoint, options);\n    return !!data?.result;\n  }\n\n  /**\n   * Rename a tag in a collection\n   * Raindrop.io API: PUT /tags/{collectionId}\n   */\n  async renameTag(collectionId: number | undefined, oldName: string, newName: string): Promise<boolean> {\n    const endpoint = collectionId ? '/tags/{collectionId}' : '/tags/0';\n    const options = {\n      ...(collectionId && { params: { path: { id: collectionId } } }),\n      body: { from: oldName, to: newName }\n    };\n    const { data } = await (this.client as any).PUT(endpoint, options);\n    return !!data?.result;\n  }\n\n  /**\n   * Merge tags in a collection\n   * Raindrop.io API: PUT /tags/{collectionId}\n   */\n  async mergeTags(collectionId: number | undefined, tags: string[], newName: string): Promise<boolean> {\n    const endpoint = collectionId ? '/tags/{collectionId}' : '/tags/0';\n    const options = {\n      ...(collectionId && { params: { path: { id: collectionId } } }),\n      body: { tags, to: newName }\n    };\n    const { data } = await (this.client as any).PUT(endpoint, options);\n    return !!data?.result;\n  }\n\n  /**\n   * Fetch user info\n   * Raindrop.io API: GET /user\n   */\n  async getUserInfo(): Promise<{ email: string;[key: string]: any }> {\n    const { data } = await this.client.GET('/user');\n    if (!data?.user) throw new Error('User not found');\n    return data.user;\n  }\n\n  /**\n   * Fetch highlights for a specific bookmark\n   * Raindrop.io API: GET /raindrop/{id}/highlights\n   */\n  async getHighlights(raindropId: number): Promise<Highlight[]> {\n    const { data } = await this.client.GET('/raindrop/{id}/highlights', {\n      params: { path: { id: raindropId } }\n    });\n    if (!data?.items) throw new Error('No highlights found');\n    return [...data.items];\n  }\n\n  /**\n   * Fetch all highlights across all bookmarks\n   * Raindrop.io API: GET /raindrops/0\n   */\n  async getAllHighlights(): Promise<Highlight[]> {\n    const { data } = await this.client.GET('/raindrops/0');\n    if (!data?.items) return [];\n    return data.items.flatMap((bookmark: any) => Array.isArray(bookmark.highlights) ? bookmark.highlights : []);\n  }\n\n  /**\n   * Create a highlight for a bookmark\n   * Raindrop.io API: POST /highlights\n   */\n  async createHighlight(bookmarkId: number, highlight: {\n    text: string;\n    note?: string;\n    color?: string;\n  }): Promise<Highlight> {\n    const { data } = await this.client.POST('/highlights', {\n      body: {\n        ...highlight,\n        raindrop: { $id: bookmarkId },\n        color: (highlight.color as any) || 'yellow'\n      }\n    });\n    if (!data?.item) throw new Error('Failed to create highlight');\n    return data.item;\n  }\n\n  /**\n   * Update a highlight\n   * Raindrop.io API: PUT /highlights/{id}\n   */\n  async updateHighlight(id: number, updates: {\n    text?: string;\n    note?: string;\n    color?: string;\n  }): Promise<Highlight> {\n    const { data } = await this.client.PUT('/highlights/{id}', {\n      params: { path: { id } },\n      body: {\n        ...(updates.text && { text: updates.text }),\n        ...(updates.note && { note: updates.note }),\n        ...(updates.color && { color: updates.color as any })\n      }\n    });\n    if (!data?.item) throw new Error('Failed to update highlight');\n    return data.item;\n  }\n\n  /**\n   * Delete a highlight\n   * Raindrop.io API: DELETE /highlights/{id}\n   */\n  async deleteHighlight(id: number): Promise<void> {\n    await this.client.DELETE('/highlights/{id}', {\n      params: { path: { id } }\n    });\n  }\n}", "/**\n * MCP-safe logging utilities\n * \n * This module provides logging that never pollutes STDIO output, which is critical\n * for MCP protocol compliance when using STDIO transport.\n * \n * - Uses stderr for all log output (STDIO transport uses stdout)\n * - Provides structured logging with timestamps and levels\n * - Can be safely used in both STDIO and HTTP server contexts\n * - Supports environment-based log level configuration\n */\n\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\nconst LOG_LEVELS: Record<LogLevel, number> = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3,\n};\n\n/**\n * Logger class for MCP-safe logging.\n *\n * All log output is sent to stderr to avoid interfering with STDIO protocol communication.\n * Log level can be set via the LOG_LEVEL environment variable.\n */\nclass Logger {\n  private level: LogLevel;\n\n  constructor() {\n    // Default to 'info' level, can be overridden by environment\n    this.level = (process.env.LOG_LEVEL as LogLevel) || 'info';\n  }\n\n  setLevel(level: LogLevel) {\n    this.level = level;\n  }\n\n  getLevel(): LogLevel {\n    return this.level;\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return LOG_LEVELS[level] >= LOG_LEVELS[this.level];\n  }\n\n  private writeToStderr(level: LogLevel, message: string, ...args: any[]) {\n    if (!this.shouldLog(level)) {\n      return;\n    }\n\n    const timestamp = new Date().toISOString();\n    const levelStr = level.toUpperCase().padEnd(5);\n    const prefix = `[${timestamp}] ${levelStr}`;\n    \n    // Use stderr to avoid polluting STDIO MCP protocol\n    if (args.length > 0) {\n      process.stderr.write(`${prefix} ${message}\\n`);\n      args.forEach(arg => {\n        process.stderr.write(`${prefix} ${typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)}\\n`);\n      });\n    } else {\n      process.stderr.write(`${prefix} ${message}\\n`);\n    }\n  }\n\n  debug(message: string, ...args: any[]) {\n    this.writeToStderr('debug', message, ...args);\n  }\n\n  info(message: string, ...args: any[]) {\n    this.writeToStderr('info', message, ...args);\n  }\n\n  warn(message: string, ...args: any[]) {\n    this.writeToStderr('warn', message, ...args);\n  }\n\n  error(message: string, ...args: any[]) {\n    this.writeToStderr('error', message, ...args);\n  }\n\n  /**\n   * Create a child logger with a context prefix\n   */\n  /**\n   * Create a child logger with a context prefix.\n   * @param context - Context string to prefix log messages.\n   * @returns A new Logger instance with context-aware output.\n   */\n  child(context: string): Logger {\n    const childLogger = new Logger();\n    childLogger.level = this.level;\n    // Override write method to include context\n    const originalWrite = childLogger.writeToStderr.bind(childLogger);\n    childLogger.writeToStderr = (level: LogLevel, message: string, ...args: any[]) => {\n      originalWrite(level, `[${context}] ${message}`, ...args);\n    };\n    return childLogger;\n  }\n}\n\n/**\n * Singleton logger instance for general use.\n */\nexport const logger = new Logger();\n\n/**\n * Logger factory for creating context-specific loggers.\n * @param context - Optional context string for log messages.\n * @returns A Logger instance (child if context provided, otherwise singleton).\n */\nexport function createLogger(context?: string): Logger {\n  return context ? logger.child(context) : logger;\n}"],
  "mappings": "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",
  "names": ["z", "logger", "config", "z", "DiagnosticsOutputSchema", "logger", "sessionId"]
}
